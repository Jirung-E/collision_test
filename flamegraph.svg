<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="36408"><g><title>`0x7FF8743061B1 (6 samples, 0.02%)</title><rect x="0.0027%" y="565" width="0.0165%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="6"/><text x="0.2527%" y="575.50"></text></g><g><title>`0x7FF874304757 (5 samples, 0.01%)</title><rect x="0.0055%" y="549" width="0.0137%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="5"/><text x="0.2555%" y="559.50"></text></g><g><title>`0x7FF8742FF0A0 (4 samples, 0.01%)</title><rect x="0.0220%" y="437" width="0.0110%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="4"/><text x="0.2720%" y="447.50"></text></g><g><title>`0x7FF8742FA3B4 (4 samples, 0.01%)</title><rect x="0.0220%" y="421" width="0.0110%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="4"/><text x="0.2720%" y="431.50"></text></g><g><title>`0x7FF8717C00F6 (6 samples, 0.02%)</title><rect x="0.0220%" y="549" width="0.0165%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="6"/><text x="0.2720%" y="559.50"></text></g><g><title>`0x7FF8717A55ED (6 samples, 0.02%)</title><rect x="0.0220%" y="533" width="0.0165%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="6"/><text x="0.2720%" y="543.50"></text></g><g><title>`0x7FF87173423B (6 samples, 0.02%)</title><rect x="0.0220%" y="517" width="0.0165%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="6"/><text x="0.2720%" y="527.50"></text></g><g><title>`0x7FF8717963F5 (6 samples, 0.02%)</title><rect x="0.0220%" y="501" width="0.0165%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="6"/><text x="0.2720%" y="511.50"></text></g><g><title>`0x7FF871882446 (6 samples, 0.02%)</title><rect x="0.0220%" y="485" width="0.0165%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="6"/><text x="0.2720%" y="495.50"></text></g><g><title>`0x7FF87430A650 (6 samples, 0.02%)</title><rect x="0.0220%" y="469" width="0.0165%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="6"/><text x="0.2720%" y="479.50"></text></g><g><title>`0x7FF8742FED20 (6 samples, 0.02%)</title><rect x="0.0220%" y="453" width="0.0165%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="6"/><text x="0.2720%" y="463.50"></text></g><g><title>collision_test.exe`Unknown (168 samples, 0.46%)</title><rect x="1.6150%" y="373" width="0.4614%" height="15" fill="rgb(240,193,28)" fg:x="588" fg:w="168"/><text x="1.8650%" y="383.50"></text></g><g><title>collision_test.exe`_ZN120_$LT$collision_test..bounds..VertexBox$u20$as$u20$core..convert..From$LT$$RF$collision_test..bounds..BoundingBox$GT$$GT$4from17hc24ee6019698f4d4E (1,887 samples, 5.18%)</title><rect x="2.0847%" y="373" width="5.1829%" height="15" fill="rgb(216,20,37)" fg:x="759" fg:w="1887"/><text x="2.3347%" y="383.50">collis..</text></g><g><title>collision_test.exe`_ZN4core5array5drain16drain_array_with17hb0570da4c3ecb5d4E (1,434 samples, 3.94%)</title><rect x="3.3289%" y="357" width="3.9387%" height="15" fill="rgb(206,188,39)" fg:x="1212" fg:w="1434"/><text x="3.5789%" y="367.50">coll..</text></g><g><title>collision_test.exe`_ZN14collision_test6bounds11BoundingBox11new_rotated17hac1c9edeacf73f7cE (21 samples, 0.06%)</title><rect x="7.2676%" y="373" width="0.0577%" height="15" fill="rgb(217,207,13)" fg:x="2646" fg:w="21"/><text x="7.5176%" y="383.50"></text></g><g><title>collision_test.exe`Unknown (2,076 samples, 5.70%)</title><rect x="11.8738%" y="357" width="5.7020%" height="15" fill="rgb(231,73,38)" fg:x="4323" fg:w="2076"/><text x="12.1238%" y="367.50">collisi..</text></g><g><title>collision_test.exe`_ZN14collision_test6bounds11BoundingBox21obb_collision_details17hb407f3bfef345edbE (6,633 samples, 18.22%)</title><rect x="7.3253%" y="373" width="18.2185%" height="15" fill="rgb(225,20,46)" fg:x="2667" fg:w="6633"/><text x="7.5753%" y="383.50">collision_test.exe`_ZN14coll..</text></g><g><title>collision_test.exe`_ZN4core5array5drain16drain_array_with17hb0570da4c3ecb5d4E (2,901 samples, 7.97%)</title><rect x="17.5758%" y="357" width="7.9680%" height="15" fill="rgb(210,31,41)" fg:x="6399" fg:w="2901"/><text x="17.8258%" y="367.50">collision_t..</text></g><g><title>collision_test.exe`_ZN14collision_test6bounds11BoundingBox22aabb_collision_details17h441734dbe12296ccE (518 samples, 1.42%)</title><rect x="25.5438%" y="373" width="1.4228%" height="15" fill="rgb(221,200,47)" fg:x="9300" fg:w="518"/><text x="25.7938%" y="383.50"></text></g><g><title>collision_test.exe`_ZN14collision_test6bounds11BoundingBox3new17h862a3b5df40ac2f1E (52 samples, 0.14%)</title><rect x="26.9666%" y="373" width="0.1428%" height="15" fill="rgb(226,26,5)" fg:x="9818" fg:w="52"/><text x="27.2166%" y="383.50"></text></g><g><title>`0x7FF8742BBFC4 (13 samples, 0.04%)</title><rect x="33.1521%" y="341" width="0.0357%" height="15" fill="rgb(249,33,26)" fg:x="12070" fg:w="13"/><text x="33.4021%" y="351.50"></text></g><g><title>`0x7FF8742BC89E (4 samples, 0.01%)</title><rect x="33.1768%" y="325" width="0.0110%" height="15" fill="rgb(235,183,28)" fg:x="12079" fg:w="4"/><text x="33.4268%" y="335.50"></text></g><g><title>`0x7FF8742BBE86 (18 samples, 0.05%)</title><rect x="33.1466%" y="357" width="0.0494%" height="15" fill="rgb(221,5,38)" fg:x="12068" fg:w="18"/><text x="33.3966%" y="367.50"></text></g><g><title>`0x7FF8742C6AB7 (11 samples, 0.03%)</title><rect x="33.2262%" y="357" width="0.0302%" height="15" fill="rgb(247,18,42)" fg:x="12097" fg:w="11"/><text x="33.4762%" y="367.50"></text></g><g><title>`0x7FF8742BEF4A (4 samples, 0.01%)</title><rect x="33.2866%" y="341" width="0.0110%" height="15" fill="rgb(241,131,45)" fg:x="12119" fg:w="4"/><text x="33.5366%" y="351.50"></text></g><g><title>`0x7FF8742C6F81 (14 samples, 0.04%)</title><rect x="33.2729%" y="357" width="0.0385%" height="15" fill="rgb(249,31,29)" fg:x="12114" fg:w="14"/><text x="33.5229%" y="367.50"></text></g><g><title>`0x7FF8742CA4BA (6 samples, 0.02%)</title><rect x="33.3114%" y="325" width="0.0165%" height="15" fill="rgb(225,111,53)" fg:x="12128" fg:w="6"/><text x="33.5614%" y="335.50"></text></g><g><title>`0x7FF8742BBE86 (6 samples, 0.02%)</title><rect x="33.3114%" y="309" width="0.0165%" height="15" fill="rgb(238,160,17)" fg:x="12128" fg:w="6"/><text x="33.5614%" y="319.50"></text></g><g><title>`0x7FF8742BC20E (4 samples, 0.01%)</title><rect x="33.3169%" y="293" width="0.0110%" height="15" fill="rgb(214,148,48)" fg:x="12130" fg:w="4"/><text x="33.5669%" y="303.50"></text></g><g><title>`0x7FF8742CA51B (4 samples, 0.01%)</title><rect x="33.3278%" y="325" width="0.0110%" height="15" fill="rgb(232,36,49)" fg:x="12134" fg:w="4"/><text x="33.5778%" y="335.50"></text></g><g><title>`0x7FF8742C9A86 (11 samples, 0.03%)</title><rect x="33.3114%" y="357" width="0.0302%" height="15" fill="rgb(209,103,24)" fg:x="12128" fg:w="11"/><text x="33.5614%" y="367.50"></text></g><g><title>`0x7FF8742C9BC5 (11 samples, 0.03%)</title><rect x="33.3114%" y="341" width="0.0302%" height="15" fill="rgb(229,88,8)" fg:x="12128" fg:w="11"/><text x="33.5614%" y="351.50"></text></g><g><title>collision_test.exe`_ZN104_$LT$collision_test..bounds..VertexBox$u20$as$u20$collision_test..collision..convex_hull..ConvexHull$GT$18get_furthest_point17h2eb7ca15359b88ecE (5,106 samples, 14.02%)</title><rect x="33.3416%" y="357" width="14.0244%" height="15" fill="rgb(213,181,19)" fg:x="12139" fg:w="5106"/><text x="33.5916%" y="367.50">collision_test.exe`_Z..</text></g><g><title>collision_test.exe`_ZN106_$LT$collision_test..bounds..BoundingBox$u20$as$u20$collision_test..collision..convex_hull..ConvexHull$GT$18get_furthest_point17hd7a44ee405e836d4E (8,409 samples, 23.10%)</title><rect x="47.3660%" y="357" width="23.0966%" height="15" fill="rgb(254,191,54)" fg:x="17245" fg:w="8409"/><text x="47.6160%" y="367.50">collision_test.exe`_ZN106_$LT$collisi..</text></g><g><title>collision_test.exe`_ZN4core5array5drain16drain_array_with17hb0570da4c3ecb5d4E (2,890 samples, 7.94%)</title><rect x="62.5247%" y="341" width="7.9378%" height="15" fill="rgb(241,83,37)" fg:x="22764" fg:w="2890"/><text x="62.7747%" y="351.50">collision_t..</text></g><g><title>`0x7FF8742C9A86 (5 samples, 0.01%)</title><rect x="70.4625%" y="341" width="0.0137%" height="15" fill="rgb(233,36,39)" fg:x="25654" fg:w="5"/><text x="70.7125%" y="351.50"></text></g><g><title>`0x7FF8742C9BC5 (5 samples, 0.01%)</title><rect x="70.4625%" y="325" width="0.0137%" height="15" fill="rgb(226,3,54)" fg:x="25654" fg:w="5"/><text x="70.7125%" y="335.50"></text></g><g><title>collision_test.exe`_ZN123_$LT$alloc..collections..binary_heap..BinaryHeap$LT$T$GT$$u20$as$u20$core..iter..traits..collect..FromIterator$LT$T$GT$$GT$9from_iter17hd832f5a907be77cdE (7 samples, 0.02%)</title><rect x="70.4625%" y="357" width="0.0192%" height="15" fill="rgb(245,192,40)" fg:x="25654" fg:w="7"/><text x="70.7125%" y="367.50"></text></g><g><title>`0x7FF8742BBFC4 (6 samples, 0.02%)</title><rect x="70.5257%" y="325" width="0.0165%" height="15" fill="rgb(238,167,29)" fg:x="25677" fg:w="6"/><text x="70.7757%" y="335.50"></text></g><g><title>`0x7FF8742BBE86 (12 samples, 0.03%)</title><rect x="70.5175%" y="341" width="0.0330%" height="15" fill="rgb(232,182,51)" fg:x="25674" fg:w="12"/><text x="70.7675%" y="351.50"></text></g><g><title>collision_test.exe`_ZN14collision_test9collision11convex_hull4Face3vec17haa65288574fcc88fE (26 samples, 0.07%)</title><rect x="70.4818%" y="357" width="0.0714%" height="15" fill="rgb(231,60,39)" fg:x="25661" fg:w="26"/><text x="70.7318%" y="367.50"></text></g><g><title>`0x7FF8742BBE86 (17 samples, 0.05%)</title><rect x="70.5916%" y="325" width="0.0467%" height="15" fill="rgb(208,69,12)" fg:x="25701" fg:w="17"/><text x="70.8416%" y="335.50"></text></g><g><title>`0x7FF8742BBFC4 (15 samples, 0.04%)</title><rect x="70.5971%" y="309" width="0.0412%" height="15" fill="rgb(235,93,37)" fg:x="25703" fg:w="15"/><text x="70.8471%" y="319.50"></text></g><g><title>collision_test.exe`_ZN14collision_test9collision11convex_hull7Simplex34get_nearest_if_not_contains_origin17ha4e6ca803de390a3E (34 samples, 0.09%)</title><rect x="70.5532%" y="357" width="0.0934%" height="15" fill="rgb(213,116,39)" fg:x="25687" fg:w="34"/><text x="70.8032%" y="367.50"></text></g><g><title>collision_test.exe`_ZN14collision_test9collision11convex_hull4Face3vec17haa65288574fcc88fE (29 samples, 0.08%)</title><rect x="70.5669%" y="341" width="0.0797%" height="15" fill="rgb(222,207,29)" fg:x="25692" fg:w="29"/><text x="70.8169%" y="351.50"></text></g><g><title>`0x7FF8742BBE86 (8 samples, 0.02%)</title><rect x="70.6850%" y="309" width="0.0220%" height="15" fill="rgb(206,96,30)" fg:x="25735" fg:w="8"/><text x="70.9350%" y="319.50"></text></g><g><title>`0x7FF8742BBFC4 (6 samples, 0.02%)</title><rect x="70.6905%" y="293" width="0.0165%" height="15" fill="rgb(218,138,4)" fg:x="25737" fg:w="6"/><text x="70.9405%" y="303.50"></text></g><g><title>`0x7FF8742CA51B (5 samples, 0.01%)</title><rect x="70.7152%" y="277" width="0.0137%" height="15" fill="rgb(250,191,14)" fg:x="25746" fg:w="5"/><text x="70.9652%" y="287.50"></text></g><g><title>`0x7FF8742C9A86 (9 samples, 0.02%)</title><rect x="70.7070%" y="309" width="0.0247%" height="15" fill="rgb(239,60,40)" fg:x="25743" fg:w="9"/><text x="70.9570%" y="319.50"></text></g><g><title>`0x7FF8742C9BC5 (9 samples, 0.02%)</title><rect x="70.7070%" y="293" width="0.0247%" height="15" fill="rgb(206,27,48)" fg:x="25743" fg:w="9"/><text x="70.9570%" y="303.50"></text></g><g><title>collision_test.exe`_ZN4core4iter6traits8iterator8Iterator9partition17hfd03c70253909762E (32 samples, 0.09%)</title><rect x="70.6466%" y="357" width="0.0879%" height="15" fill="rgb(225,35,8)" fg:x="25721" fg:w="32"/><text x="70.8966%" y="367.50"></text></g><g><title>collision_test.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h5f0151328fa1be2cE (20 samples, 0.05%)</title><rect x="70.6795%" y="341" width="0.0549%" height="15" fill="rgb(250,213,24)" fg:x="25733" fg:w="20"/><text x="70.9295%" y="351.50"></text></g><g><title>collision_test.exe`Unknown (19 samples, 0.05%)</title><rect x="70.6823%" y="325" width="0.0522%" height="15" fill="rgb(247,123,22)" fg:x="25734" fg:w="19"/><text x="70.9323%" y="335.50"></text></g><g><title>`0x7FF8742BBFC4 (9 samples, 0.02%)</title><rect x="70.7399%" y="261" width="0.0247%" height="15" fill="rgb(231,138,38)" fg:x="25755" fg:w="9"/><text x="70.9899%" y="271.50"></text></g><g><title>`0x7FF8742CA4BA (11 samples, 0.03%)</title><rect x="70.7372%" y="293" width="0.0302%" height="15" fill="rgb(231,145,46)" fg:x="25754" fg:w="11"/><text x="70.9872%" y="303.50"></text></g><g><title>`0x7FF8742BBE86 (11 samples, 0.03%)</title><rect x="70.7372%" y="277" width="0.0302%" height="15" fill="rgb(251,118,11)" fg:x="25754" fg:w="11"/><text x="70.9872%" y="287.50"></text></g><g><title>`0x7FF8742C9BC5 (21 samples, 0.06%)</title><rect x="70.7372%" y="309" width="0.0577%" height="15" fill="rgb(217,147,25)" fg:x="25754" fg:w="21"/><text x="70.9872%" y="319.50"></text></g><g><title>`0x7FF8742CA51B (7 samples, 0.02%)</title><rect x="70.7757%" y="293" width="0.0192%" height="15" fill="rgb(247,81,37)" fg:x="25768" fg:w="7"/><text x="71.0257%" y="303.50"></text></g><g><title>`0x7FF8742C9A86 (23 samples, 0.06%)</title><rect x="70.7345%" y="325" width="0.0632%" height="15" fill="rgb(209,12,38)" fg:x="25753" fg:w="23"/><text x="70.9845%" y="335.50"></text></g><g><title>collision_test.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h5f0151328fa1be2cE (24 samples, 0.07%)</title><rect x="70.7345%" y="357" width="0.0659%" height="15" fill="rgb(227,1,9)" fg:x="25753" fg:w="24"/><text x="70.9845%" y="367.50"></text></g><g><title>collision_test.exe`Unknown (24 samples, 0.07%)</title><rect x="70.7345%" y="341" width="0.0659%" height="15" fill="rgb(248,47,43)" fg:x="25753" fg:w="24"/><text x="70.9845%" y="351.50"></text></g><g><title>collision_test.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hb4c2d09a45b0a414E (6 samples, 0.02%)</title><rect x="70.8004%" y="357" width="0.0165%" height="15" fill="rgb(221,10,30)" fg:x="25777" fg:w="6"/><text x="71.0504%" y="367.50"></text></g><g><title>collision_test.exe`Unknown (6 samples, 0.02%)</title><rect x="70.8004%" y="341" width="0.0165%" height="15" fill="rgb(210,229,1)" fg:x="25777" fg:w="6"/><text x="71.0504%" y="351.50"></text></g><g><title>`0x7FF8742C9A86 (6 samples, 0.02%)</title><rect x="70.8004%" y="325" width="0.0165%" height="15" fill="rgb(222,148,37)" fg:x="25777" fg:w="6"/><text x="71.0504%" y="335.50"></text></g><g><title>`0x7FF8742C9BC5 (6 samples, 0.02%)</title><rect x="70.8004%" y="309" width="0.0165%" height="15" fill="rgb(234,67,33)" fg:x="25777" fg:w="6"/><text x="71.0504%" y="319.50"></text></g><g><title>`0x7FF8742BC757 (4 samples, 0.01%)</title><rect x="70.8443%" y="293" width="0.0110%" height="15" fill="rgb(247,98,35)" fg:x="25793" fg:w="4"/><text x="71.0943%" y="303.50"></text></g><g><title>`0x7FF8742BBE86 (11 samples, 0.03%)</title><rect x="70.8306%" y="325" width="0.0302%" height="15" fill="rgb(247,138,52)" fg:x="25788" fg:w="11"/><text x="71.0806%" y="335.50"></text></g><g><title>`0x7FF8742BBFC4 (11 samples, 0.03%)</title><rect x="70.8306%" y="309" width="0.0302%" height="15" fill="rgb(213,79,30)" fg:x="25788" fg:w="11"/><text x="71.0806%" y="319.50"></text></g><g><title>collision_test.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hfee80452aa924c84E (20 samples, 0.05%)</title><rect x="70.8169%" y="357" width="0.0549%" height="15" fill="rgb(246,177,23)" fg:x="25783" fg:w="20"/><text x="71.0669%" y="367.50"></text></g><g><title>collision_test.exe`Unknown (16 samples, 0.04%)</title><rect x="70.8278%" y="341" width="0.0439%" height="15" fill="rgb(230,62,27)" fg:x="25787" fg:w="16"/><text x="71.0778%" y="351.50"></text></g><g><title>collision_test.exe`_ZN14collision_test9collision11convex_hull10ConvexHull7gjk_epa17hac183749ac1ad06cE (15,935 samples, 43.77%)</title><rect x="27.1094%" y="373" width="43.7679%" height="15" fill="rgb(216,154,8)" fg:x="9870" fg:w="15935"/><text x="27.3594%" y="383.50">collision_test.exe`_ZN14collision_test9collision11convex_hull10ConvexHul..</text></g><g><title>`0x7FF8742BBFC4 (11 samples, 0.03%)</title><rect x="74.3188%" y="341" width="0.0302%" height="15" fill="rgb(244,35,45)" fg:x="27058" fg:w="11"/><text x="74.5688%" y="351.50"></text></g><g><title>`0x7FF8742BBE86 (15 samples, 0.04%)</title><rect x="74.3106%" y="357" width="0.0412%" height="15" fill="rgb(251,115,12)" fg:x="27055" fg:w="15"/><text x="74.5606%" y="367.50"></text></g><g><title>`0x7FF8742C6AB7 (15 samples, 0.04%)</title><rect x="74.3985%" y="357" width="0.0412%" height="15" fill="rgb(240,54,50)" fg:x="27087" fg:w="15"/><text x="74.6485%" y="367.50"></text></g><g><title>`0x7FF8742CA4BA (5 samples, 0.01%)</title><rect x="74.4534%" y="325" width="0.0137%" height="15" fill="rgb(233,84,52)" fg:x="27107" fg:w="5"/><text x="74.7034%" y="335.50"></text></g><g><title>`0x7FF8742BBE86 (5 samples, 0.01%)</title><rect x="74.4534%" y="309" width="0.0137%" height="15" fill="rgb(207,117,47)" fg:x="27107" fg:w="5"/><text x="74.7034%" y="319.50"></text></g><g><title>`0x7FF8742C9A86 (10 samples, 0.03%)</title><rect x="74.4534%" y="357" width="0.0275%" height="15" fill="rgb(249,43,39)" fg:x="27107" fg:w="10"/><text x="74.7034%" y="367.50"></text></g><g><title>`0x7FF8742C9BC5 (10 samples, 0.03%)</title><rect x="74.4534%" y="341" width="0.0275%" height="15" fill="rgb(209,38,44)" fg:x="27107" fg:w="10"/><text x="74.7034%" y="351.50"></text></g><g><title>collision_test.exe`_ZN101_$LT$collision_test..sphere..Sphere$u20$as$u20$collision_test..collision..convex_hull..ConvexHull$GT$18get_furthest_point17h4c91d33d8580a639E (308 samples, 0.85%)</title><rect x="74.4809%" y="357" width="0.8460%" height="15" fill="rgb(236,212,23)" fg:x="27117" fg:w="308"/><text x="74.7309%" y="367.50"></text></g><g><title>collision_test.exe`_ZN106_$LT$collision_test..bounds..BoundingBox$u20$as$u20$collision_test..collision..convex_hull..ConvexHull$GT$18get_furthest_point17hd7a44ee405e836d4E (6,781 samples, 18.63%)</title><rect x="75.3269%" y="357" width="18.6250%" height="15" fill="rgb(242,79,21)" fg:x="27425" fg:w="6781"/><text x="75.5769%" y="367.50">collision_test.exe`_ZN106_$LT..</text></g><g><title>collision_test.exe`_ZN4core5array5drain16drain_array_with17hb0570da4c3ecb5d4E (2,700 samples, 7.42%)</title><rect x="86.5359%" y="341" width="7.4160%" height="15" fill="rgb(211,96,35)" fg:x="31506" fg:w="2700"/><text x="86.7859%" y="351.50">collision_..</text></g><g><title>collision_test.exe`_ZN123_$LT$alloc..collections..binary_heap..BinaryHeap$LT$T$GT$$u20$as$u20$core..iter..traits..collect..FromIterator$LT$T$GT$$GT$9from_iter17hd832f5a907be77cdE (6 samples, 0.02%)</title><rect x="93.9519%" y="357" width="0.0165%" height="15" fill="rgb(253,215,40)" fg:x="34206" fg:w="6"/><text x="94.2019%" y="367.50"></text></g><g><title>`0x7FF8742C9A86 (6 samples, 0.02%)</title><rect x="93.9519%" y="341" width="0.0165%" height="15" fill="rgb(211,81,21)" fg:x="34206" fg:w="6"/><text x="94.2019%" y="351.50"></text></g><g><title>`0x7FF8742C9BC5 (4 samples, 0.01%)</title><rect x="93.9574%" y="325" width="0.0110%" height="15" fill="rgb(208,190,38)" fg:x="34208" fg:w="4"/><text x="94.2074%" y="335.50"></text></g><g><title>`0x7FF8742BC757 (6 samples, 0.02%)</title><rect x="93.9876%" y="309" width="0.0165%" height="15" fill="rgb(235,213,38)" fg:x="34219" fg:w="6"/><text x="94.2376%" y="319.50"></text></g><g><title>`0x7FF8742BBE86 (9 samples, 0.02%)</title><rect x="93.9821%" y="341" width="0.0247%" height="15" fill="rgb(237,122,38)" fg:x="34217" fg:w="9"/><text x="94.2321%" y="351.50"></text></g><g><title>`0x7FF8742BBFC4 (9 samples, 0.02%)</title><rect x="93.9821%" y="325" width="0.0247%" height="15" fill="rgb(244,218,35)" fg:x="34217" fg:w="9"/><text x="94.2321%" y="335.50"></text></g><g><title>collision_test.exe`_ZN14collision_test9collision11convex_hull4Face3vec17haa65288574fcc88fE (16 samples, 0.04%)</title><rect x="93.9684%" y="357" width="0.0439%" height="15" fill="rgb(240,68,47)" fg:x="34212" fg:w="16"/><text x="94.2184%" y="367.50"></text></g><g><title>`0x7FF8742BBE86 (8 samples, 0.02%)</title><rect x="94.0315%" y="325" width="0.0220%" height="15" fill="rgb(210,16,53)" fg:x="34235" fg:w="8"/><text x="94.2815%" y="335.50"></text></g><g><title>`0x7FF8742BBFC4 (8 samples, 0.02%)</title><rect x="94.0315%" y="309" width="0.0220%" height="15" fill="rgb(235,124,12)" fg:x="34235" fg:w="8"/><text x="94.2815%" y="319.50"></text></g><g><title>`0x7FF8742BC757 (4 samples, 0.01%)</title><rect x="94.0425%" y="293" width="0.0110%" height="15" fill="rgb(224,169,11)" fg:x="34239" fg:w="4"/><text x="94.2925%" y="303.50"></text></g><g><title>collision_test.exe`_ZN14collision_test9collision11convex_hull7Simplex34get_nearest_if_not_contains_origin17ha4e6ca803de390a3E (16 samples, 0.04%)</title><rect x="94.0123%" y="357" width="0.0439%" height="15" fill="rgb(250,166,2)" fg:x="34228" fg:w="16"/><text x="94.2623%" y="367.50"></text></g><g><title>collision_test.exe`_ZN14collision_test9collision11convex_hull4Face3vec17haa65288574fcc88fE (12 samples, 0.03%)</title><rect x="94.0233%" y="341" width="0.0330%" height="15" fill="rgb(242,216,29)" fg:x="34232" fg:w="12"/><text x="94.2733%" y="351.50"></text></g><g><title>`0x7FF8742BC757 (11 samples, 0.03%)</title><rect x="94.1991%" y="277" width="0.0302%" height="15" fill="rgb(230,116,27)" fg:x="34296" fg:w="11"/><text x="94.4491%" y="287.50"></text></g><g><title>`0x7FF8742BBFC4 (22 samples, 0.06%)</title><rect x="94.1881%" y="293" width="0.0604%" height="15" fill="rgb(228,99,48)" fg:x="34292" fg:w="22"/><text x="94.4381%" y="303.50"></text></g><g><title>`0x7FF8742BBE86 (26 samples, 0.07%)</title><rect x="94.1826%" y="309" width="0.0714%" height="15" fill="rgb(253,11,6)" fg:x="34290" fg:w="26"/><text x="94.4326%" y="319.50"></text></g><g><title>`0x7FF8742BBFC4 (11 samples, 0.03%)</title><rect x="94.2760%" y="245" width="0.0302%" height="15" fill="rgb(247,143,39)" fg:x="34324" fg:w="11"/><text x="94.5260%" y="255.50"></text></g><g><title>`0x7FF8742CA4BA (15 samples, 0.04%)</title><rect x="94.2677%" y="277" width="0.0412%" height="15" fill="rgb(236,97,10)" fg:x="34321" fg:w="15"/><text x="94.5177%" y="287.50"></text></g><g><title>`0x7FF8742BBE86 (15 samples, 0.04%)</title><rect x="94.2677%" y="261" width="0.0412%" height="15" fill="rgb(233,208,19)" fg:x="34321" fg:w="15"/><text x="94.5177%" y="271.50"></text></g><g><title>`0x7FF8742C6AB7 (4 samples, 0.01%)</title><rect x="94.3337%" y="261" width="0.0110%" height="15" fill="rgb(216,164,2)" fg:x="34345" fg:w="4"/><text x="94.5837%" y="271.50"></text></g><g><title>`0x7FF8742C9BC5 (32 samples, 0.09%)</title><rect x="94.2623%" y="293" width="0.0879%" height="15" fill="rgb(220,129,5)" fg:x="34319" fg:w="32"/><text x="94.5123%" y="303.50"></text></g><g><title>`0x7FF8742CA51B (12 samples, 0.03%)</title><rect x="94.3172%" y="277" width="0.0330%" height="15" fill="rgb(242,17,10)" fg:x="34339" fg:w="12"/><text x="94.5672%" y="287.50"></text></g><g><title>`0x7FF8742C9A86 (34 samples, 0.09%)</title><rect x="94.2595%" y="309" width="0.0934%" height="15" fill="rgb(242,107,0)" fg:x="34318" fg:w="34"/><text x="94.5095%" y="319.50"></text></g><g><title>collision_test.exe`_ZN4core4iter6traits8iterator8Iterator9partition17hfd03c70253909762E (113 samples, 0.31%)</title><rect x="94.0563%" y="357" width="0.3104%" height="15" fill="rgb(251,28,31)" fg:x="34244" fg:w="113"/><text x="94.3063%" y="367.50"></text></g><g><title>collision_test.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h5f0151328fa1be2cE (71 samples, 0.20%)</title><rect x="94.1716%" y="341" width="0.1950%" height="15" fill="rgb(233,223,10)" fg:x="34286" fg:w="71"/><text x="94.4216%" y="351.50"></text></g><g><title>collision_test.exe`Unknown (70 samples, 0.19%)</title><rect x="94.1744%" y="325" width="0.1923%" height="15" fill="rgb(215,21,27)" fg:x="34287" fg:w="70"/><text x="94.4244%" y="335.50"></text></g><g><title>`0x7FF8742CA4BA (11 samples, 0.03%)</title><rect x="94.3831%" y="293" width="0.0302%" height="15" fill="rgb(232,23,21)" fg:x="34363" fg:w="11"/><text x="94.6331%" y="303.50"></text></g><g><title>`0x7FF8742BBE86 (11 samples, 0.03%)</title><rect x="94.3831%" y="277" width="0.0302%" height="15" fill="rgb(244,5,23)" fg:x="34363" fg:w="11"/><text x="94.6331%" y="287.50"></text></g><g><title>`0x7FF8742BBFC4 (8 samples, 0.02%)</title><rect x="94.3913%" y="261" width="0.0220%" height="15" fill="rgb(226,81,46)" fg:x="34366" fg:w="8"/><text x="94.6413%" y="271.50"></text></g><g><title>`0x7FF8742C9A86 (21 samples, 0.06%)</title><rect x="94.3721%" y="325" width="0.0577%" height="15" fill="rgb(247,70,30)" fg:x="34359" fg:w="21"/><text x="94.6221%" y="335.50"></text></g><g><title>`0x7FF8742C9BC5 (19 samples, 0.05%)</title><rect x="94.3776%" y="309" width="0.0522%" height="15" fill="rgb(212,68,19)" fg:x="34361" fg:w="19"/><text x="94.6276%" y="319.50"></text></g><g><title>collision_test.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h5f0151328fa1be2cE (24 samples, 0.07%)</title><rect x="94.3666%" y="357" width="0.0659%" height="15" fill="rgb(240,187,13)" fg:x="34357" fg:w="24"/><text x="94.6166%" y="367.50"></text></g><g><title>collision_test.exe`Unknown (23 samples, 0.06%)</title><rect x="94.3694%" y="341" width="0.0632%" height="15" fill="rgb(223,113,26)" fg:x="34358" fg:w="23"/><text x="94.6194%" y="351.50"></text></g><g><title>`0x7FF8742CA4BA (7 samples, 0.02%)</title><rect x="94.4435%" y="293" width="0.0192%" height="15" fill="rgb(206,192,2)" fg:x="34385" fg:w="7"/><text x="94.6935%" y="303.50"></text></g><g><title>`0x7FF8742BBE86 (7 samples, 0.02%)</title><rect x="94.4435%" y="277" width="0.0192%" height="15" fill="rgb(241,108,4)" fg:x="34385" fg:w="7"/><text x="94.6935%" y="287.50"></text></g><g><title>`0x7FF8742BBFC4 (6 samples, 0.02%)</title><rect x="94.4463%" y="261" width="0.0165%" height="15" fill="rgb(247,173,49)" fg:x="34386" fg:w="6"/><text x="94.6963%" y="271.50"></text></g><g><title>collision_test.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hb4c2d09a45b0a414E (13 samples, 0.04%)</title><rect x="94.4325%" y="357" width="0.0357%" height="15" fill="rgb(224,114,35)" fg:x="34381" fg:w="13"/><text x="94.6825%" y="367.50"></text></g><g><title>collision_test.exe`Unknown (12 samples, 0.03%)</title><rect x="94.4353%" y="341" width="0.0330%" height="15" fill="rgb(245,159,27)" fg:x="34382" fg:w="12"/><text x="94.6853%" y="351.50"></text></g><g><title>`0x7FF8742C9A86 (9 samples, 0.02%)</title><rect x="94.4435%" y="325" width="0.0247%" height="15" fill="rgb(245,172,44)" fg:x="34385" fg:w="9"/><text x="94.6935%" y="335.50"></text></g><g><title>`0x7FF8742C9BC5 (9 samples, 0.02%)</title><rect x="94.4435%" y="309" width="0.0247%" height="15" fill="rgb(236,23,11)" fg:x="34385" fg:w="9"/><text x="94.6935%" y="319.50"></text></g><g><title>`0x7FF8742BBFC4 (6 samples, 0.02%)</title><rect x="94.4710%" y="309" width="0.0165%" height="15" fill="rgb(205,117,38)" fg:x="34395" fg:w="6"/><text x="94.7210%" y="319.50"></text></g><g><title>`0x7FF8742BBE86 (7 samples, 0.02%)</title><rect x="94.4710%" y="325" width="0.0192%" height="15" fill="rgb(237,72,25)" fg:x="34395" fg:w="7"/><text x="94.7210%" y="335.50"></text></g><g><title>collision_test.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hfee80452aa924c84E (16 samples, 0.04%)</title><rect x="94.4682%" y="357" width="0.0439%" height="15" fill="rgb(244,70,9)" fg:x="34394" fg:w="16"/><text x="94.7182%" y="367.50"></text></g><g><title>collision_test.exe`Unknown (15 samples, 0.04%)</title><rect x="94.4710%" y="341" width="0.0412%" height="15" fill="rgb(217,125,39)" fg:x="34395" fg:w="15"/><text x="94.7210%" y="351.50"></text></g><g><title>`0x7FF8742C9A86 (7 samples, 0.02%)</title><rect x="94.4930%" y="325" width="0.0192%" height="15" fill="rgb(235,36,10)" fg:x="34403" fg:w="7"/><text x="94.7430%" y="335.50"></text></g><g><title>`0x7FF8742C9BC5 (7 samples, 0.02%)</title><rect x="94.4930%" y="309" width="0.0192%" height="15" fill="rgb(251,123,47)" fg:x="34403" fg:w="7"/><text x="94.7430%" y="319.50"></text></g><g><title>collision_test.exe`_ZN14collision_test9collision11convex_hull10ConvexHull7gjk_epa17hebc825d887d23cd7E (8,609 samples, 23.65%)</title><rect x="70.8773%" y="373" width="23.6459%" height="15" fill="rgb(221,13,13)" fg:x="25805" fg:w="8609"/><text x="71.1273%" y="383.50">collision_test.exe`_ZN14collision_test..</text></g><g><title>collision_test.exe`_ZN154_$LT$collision_test..sphere..Sphere$u20$as$u20$collision_test..collision..static_collision..StaticCollision$LT$collision_test..bounds..BoundingBox$GT$$GT$30check_static_collision_details17h554a6216f78a1c3bE (859 samples, 2.36%)</title><rect x="94.5232%" y="373" width="2.3594%" height="15" fill="rgb(238,131,9)" fg:x="34414" fg:w="859"/><text x="94.7732%" y="383.50">c..</text></g><g><title>collision_test.exe`_ZN154_$LT$collision_test..bounds..BoundingBox$u20$as$u20$collision_test..collision..static_collision..StaticCollision$LT$collision_test..sphere..Sphere$GT$$GT$30check_static_collision_details17ha3fcca4fd6e41994E (799 samples, 2.19%)</title><rect x="94.6880%" y="357" width="2.1946%" height="15" fill="rgb(211,50,8)" fg:x="34474" fg:w="799"/><text x="94.9380%" y="367.50">c..</text></g><g><title>collision_test.exe`_ZN4rand4rngs9reseeding29ReseedingCore$LT$R$C$Rsdr$GT$19reseed_and_generate17hc449c1cfd28a4dffE.llvm.1695759254846458887 (6 samples, 0.02%)</title><rect x="96.8826%" y="373" width="0.0165%" height="15" fill="rgb(245,182,24)" fg:x="35273" fg:w="6"/><text x="97.1326%" y="383.50"></text></g><g><title>collision_test.exe`_ZN9getrandom8backends7windows10fill_inner17hc0da0987a0b3155cE (5 samples, 0.01%)</title><rect x="96.8853%" y="357" width="0.0137%" height="15" fill="rgb(242,14,37)" fg:x="35274" fg:w="5"/><text x="97.1353%" y="367.50"></text></g><g><title>`0x7FF874405109 (4 samples, 0.01%)</title><rect x="96.9183%" y="293" width="0.0110%" height="15" fill="rgb(246,228,12)" fg:x="35286" fg:w="4"/><text x="97.1683%" y="303.50"></text></g><g><title>`0x7FF874405113 (144 samples, 0.40%)</title><rect x="96.9292%" y="293" width="0.3955%" height="15" fill="rgb(213,55,15)" fg:x="35290" fg:w="144"/><text x="97.1792%" y="303.50"></text></g><g><title>`0x7FF874405117 (77 samples, 0.21%)</title><rect x="97.3248%" y="293" width="0.2115%" height="15" fill="rgb(209,9,3)" fg:x="35434" fg:w="77"/><text x="97.5748%" y="303.50"></text></g><g><title>`0x7FF87440511B (4 samples, 0.01%)</title><rect x="97.5363%" y="293" width="0.0110%" height="15" fill="rgb(230,59,30)" fg:x="35511" fg:w="4"/><text x="97.7863%" y="303.50"></text></g><g><title>`0x7FF874405120 (5 samples, 0.01%)</title><rect x="97.5472%" y="293" width="0.0137%" height="15" fill="rgb(209,121,21)" fg:x="35515" fg:w="5"/><text x="97.7972%" y="303.50"></text></g><g><title>`0x7FF874405127 (5 samples, 0.01%)</title><rect x="97.5610%" y="293" width="0.0137%" height="15" fill="rgb(220,109,13)" fg:x="35520" fg:w="5"/><text x="97.8110%" y="303.50"></text></g><g><title>`0x7FF87440512B (4 samples, 0.01%)</title><rect x="97.5747%" y="293" width="0.0110%" height="15" fill="rgb(232,18,1)" fg:x="35525" fg:w="4"/><text x="97.8247%" y="303.50"></text></g><g><title>`0x7FF8742CAB69 (253 samples, 0.69%)</title><rect x="96.9045%" y="309" width="0.6949%" height="15" fill="rgb(215,41,42)" fg:x="35281" fg:w="253"/><text x="97.1545%" y="319.50"></text></g><g><title>collision_test.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17ha260551dfb9699c2E (268 samples, 0.74%)</title><rect x="96.8990%" y="373" width="0.7361%" height="15" fill="rgb(224,123,36)" fg:x="35279" fg:w="268"/><text x="97.1490%" y="383.50"></text></g><g><title>collision_test.exe`Unknown (267 samples, 0.73%)</title><rect x="96.9018%" y="357" width="0.7334%" height="15" fill="rgb(240,125,3)" fg:x="35280" fg:w="267"/><text x="97.1518%" y="367.50"></text></g><g><title>`0x7FF8742C9A86 (267 samples, 0.73%)</title><rect x="96.9018%" y="341" width="0.7334%" height="15" fill="rgb(205,98,50)" fg:x="35280" fg:w="267"/><text x="97.1518%" y="351.50"></text></g><g><title>`0x7FF8742C9BC5 (267 samples, 0.73%)</title><rect x="96.9018%" y="325" width="0.7334%" height="15" fill="rgb(205,185,37)" fg:x="35280" fg:w="267"/><text x="97.1518%" y="335.50"></text></g><g><title>`0x7FF8742CAB7C (13 samples, 0.04%)</title><rect x="97.5994%" y="309" width="0.0357%" height="15" fill="rgb(238,207,15)" fg:x="35534" fg:w="13"/><text x="97.8494%" y="319.50"></text></g><g><title>`0x7FF8742C6F81 (13 samples, 0.04%)</title><rect x="97.5994%" y="293" width="0.0357%" height="15" fill="rgb(213,199,42)" fg:x="35534" fg:w="13"/><text x="97.8494%" y="303.50"></text></g><g><title>`0x7FF8742BFAFD (13 samples, 0.04%)</title><rect x="97.5994%" y="277" width="0.0357%" height="15" fill="rgb(235,201,11)" fg:x="35534" fg:w="13"/><text x="97.8494%" y="287.50"></text></g><g><title>`0x7FF8742E813F (13 samples, 0.04%)</title><rect x="97.5994%" y="261" width="0.0357%" height="15" fill="rgb(207,46,11)" fg:x="35534" fg:w="13"/><text x="97.8494%" y="271.50"></text></g><g><title>`0x7FF8743FFBB4 (13 samples, 0.04%)</title><rect x="97.5994%" y="245" width="0.0357%" height="15" fill="rgb(241,35,35)" fg:x="35534" fg:w="13"/><text x="97.8494%" y="255.50"></text></g><g><title>`0x7FF8717C7939 (11 samples, 0.03%)</title><rect x="98.1405%" y="357" width="0.0302%" height="15" fill="rgb(243,32,47)" fg:x="35731" fg:w="11"/><text x="98.3905%" y="367.50"></text></g><g><title>`0x7FF8717C79F0 (5 samples, 0.01%)</title><rect x="98.1955%" y="357" width="0.0137%" height="15" fill="rgb(247,202,23)" fg:x="35751" fg:w="5"/><text x="98.4455%" y="367.50"></text></g><g><title>`0x7FF8717C7A0C (10 samples, 0.03%)</title><rect x="98.2092%" y="357" width="0.0275%" height="15" fill="rgb(219,102,11)" fg:x="35756" fg:w="10"/><text x="98.4592%" y="367.50"></text></g><g><title>`0x7FF8717C7A2E (5 samples, 0.01%)</title><rect x="98.2394%" y="357" width="0.0137%" height="15" fill="rgb(243,110,44)" fg:x="35767" fg:w="5"/><text x="98.4894%" y="367.50"></text></g><g><title>`0x7FF8717C7A3B (6 samples, 0.02%)</title><rect x="98.2559%" y="357" width="0.0165%" height="15" fill="rgb(222,74,54)" fg:x="35773" fg:w="6"/><text x="98.5059%" y="367.50"></text></g><g><title>`0x7FF8717C7A3F (8 samples, 0.02%)</title><rect x="98.2724%" y="357" width="0.0220%" height="15" fill="rgb(216,99,12)" fg:x="35779" fg:w="8"/><text x="98.5224%" y="367.50"></text></g><g><title>`0x7FF8717C7A4C (10 samples, 0.03%)</title><rect x="98.2943%" y="357" width="0.0275%" height="15" fill="rgb(226,22,26)" fg:x="35787" fg:w="10"/><text x="98.5443%" y="367.50"></text></g><g><title>`0x7FF8717C7A58 (13 samples, 0.04%)</title><rect x="98.3218%" y="357" width="0.0357%" height="15" fill="rgb(217,163,10)" fg:x="35797" fg:w="13"/><text x="98.5718%" y="367.50"></text></g><g><title>`0x7FF8717C7A5C (15 samples, 0.04%)</title><rect x="98.3575%" y="357" width="0.0412%" height="15" fill="rgb(213,25,53)" fg:x="35810" fg:w="15"/><text x="98.6075%" y="367.50"></text></g><g><title>`0x7FF8717C7A60 (15 samples, 0.04%)</title><rect x="98.3987%" y="357" width="0.0412%" height="15" fill="rgb(252,105,26)" fg:x="35825" fg:w="15"/><text x="98.6487%" y="367.50"></text></g><g><title>`0x7FF8717C7AA4 (4 samples, 0.01%)</title><rect x="98.4399%" y="357" width="0.0110%" height="15" fill="rgb(220,39,43)" fg:x="35840" fg:w="4"/><text x="98.6899%" y="367.50"></text></g><g><title>`0x7FF8717C7AB1 (8 samples, 0.02%)</title><rect x="98.4536%" y="357" width="0.0220%" height="15" fill="rgb(229,68,48)" fg:x="35845" fg:w="8"/><text x="98.7036%" y="367.50"></text></g><g><title>`0x7FF8717C7ABA (12 samples, 0.03%)</title><rect x="98.4756%" y="357" width="0.0330%" height="15" fill="rgb(252,8,32)" fg:x="35853" fg:w="12"/><text x="98.7256%" y="367.50"></text></g><g><title>`0x7FF8717C7AC3 (7 samples, 0.02%)</title><rect x="98.5086%" y="357" width="0.0192%" height="15" fill="rgb(223,20,43)" fg:x="35865" fg:w="7"/><text x="98.7586%" y="367.50"></text></g><g><title>`0x7FF8717C7ACC (8 samples, 0.02%)</title><rect x="98.5278%" y="357" width="0.0220%" height="15" fill="rgb(229,81,49)" fg:x="35872" fg:w="8"/><text x="98.7778%" y="367.50"></text></g><g><title>`0x7FF8717C7AD8 (8 samples, 0.02%)</title><rect x="98.5525%" y="357" width="0.0220%" height="15" fill="rgb(236,28,36)" fg:x="35881" fg:w="8"/><text x="98.8025%" y="367.50"></text></g><g><title>`0x7FF8717C7ADC (6 samples, 0.02%)</title><rect x="98.5745%" y="357" width="0.0165%" height="15" fill="rgb(249,185,26)" fg:x="35889" fg:w="6"/><text x="98.8245%" y="367.50"></text></g><g><title>`0x7FF8717C7AE4 (12 samples, 0.03%)</title><rect x="98.5910%" y="357" width="0.0330%" height="15" fill="rgb(249,174,33)" fg:x="35895" fg:w="12"/><text x="98.8410%" y="367.50"></text></g><g><title>`0x7FF8717C7AE8 (14 samples, 0.04%)</title><rect x="98.6239%" y="357" width="0.0385%" height="15" fill="rgb(233,201,37)" fg:x="35907" fg:w="14"/><text x="98.8739%" y="367.50"></text></g><g><title>`0x7FF8717C7B0B (14 samples, 0.04%)</title><rect x="98.6706%" y="357" width="0.0385%" height="15" fill="rgb(221,78,26)" fg:x="35924" fg:w="14"/><text x="98.9206%" y="367.50"></text></g><g><title>`0x7FF8717C7B18 (12 samples, 0.03%)</title><rect x="98.7091%" y="357" width="0.0330%" height="15" fill="rgb(250,127,30)" fg:x="35938" fg:w="12"/><text x="98.9591%" y="367.50"></text></g><g><title>`0x7FF8717C7B2C (24 samples, 0.07%)</title><rect x="98.7530%" y="357" width="0.0659%" height="15" fill="rgb(230,49,44)" fg:x="35954" fg:w="24"/><text x="99.0030%" y="367.50"></text></g><g><title>`0x7FF8717C7B30 (38 samples, 0.10%)</title><rect x="98.8189%" y="357" width="0.1044%" height="15" fill="rgb(229,67,23)" fg:x="35978" fg:w="38"/><text x="99.0689%" y="367.50"></text></g><g><title>`0x7FF8717CBD30 (8 samples, 0.02%)</title><rect x="98.9288%" y="357" width="0.0220%" height="15" fill="rgb(249,83,47)" fg:x="36018" fg:w="8"/><text x="99.1788%" y="367.50"></text></g><g><title>`0x7FF8717CBDE0 (8 samples, 0.02%)</title><rect x="98.9563%" y="357" width="0.0220%" height="15" fill="rgb(215,43,3)" fg:x="36028" fg:w="8"/><text x="99.2063%" y="367.50"></text></g><g><title>`0x7FF8717CBE0B (13 samples, 0.04%)</title><rect x="98.9920%" y="357" width="0.0357%" height="15" fill="rgb(238,154,13)" fg:x="36041" fg:w="13"/><text x="99.2420%" y="367.50"></text></g><g><title>`0x7FF8717CBE18 (6 samples, 0.02%)</title><rect x="99.0277%" y="357" width="0.0165%" height="15" fill="rgb(219,56,2)" fg:x="36054" fg:w="6"/><text x="99.2777%" y="367.50"></text></g><g><title>`0x7FF8717CBE24 (4 samples, 0.01%)</title><rect x="99.0442%" y="357" width="0.0110%" height="15" fill="rgb(233,0,4)" fg:x="36060" fg:w="4"/><text x="99.2942%" y="367.50"></text></g><g><title>`0x7FF8717CBE28 (4 samples, 0.01%)</title><rect x="99.0552%" y="357" width="0.0110%" height="15" fill="rgb(235,30,7)" fg:x="36064" fg:w="4"/><text x="99.3052%" y="367.50"></text></g><g><title>`0x7FF8717CBE2C (5 samples, 0.01%)</title><rect x="99.0661%" y="357" width="0.0137%" height="15" fill="rgb(250,79,13)" fg:x="36068" fg:w="5"/><text x="99.3161%" y="367.50"></text></g><g><title>`0x7FF8717CBF95 (6 samples, 0.02%)</title><rect x="99.0799%" y="357" width="0.0165%" height="15" fill="rgb(211,146,34)" fg:x="36073" fg:w="6"/><text x="99.3299%" y="367.50"></text></g><g><title>`0x7FF8717CBFB9 (10 samples, 0.03%)</title><rect x="99.1046%" y="357" width="0.0275%" height="15" fill="rgb(228,22,38)" fg:x="36082" fg:w="10"/><text x="99.3546%" y="367.50"></text></g><g><title>`0x7FF8717CBFC2 (9 samples, 0.02%)</title><rect x="99.1321%" y="357" width="0.0247%" height="15" fill="rgb(235,168,5)" fg:x="36092" fg:w="9"/><text x="99.3821%" y="367.50"></text></g><g><title>`0x7FF8717CBFCB (10 samples, 0.03%)</title><rect x="99.1568%" y="357" width="0.0275%" height="15" fill="rgb(221,155,16)" fg:x="36101" fg:w="10"/><text x="99.4068%" y="367.50"></text></g><g><title>`0x7FF8717CBFD4 (9 samples, 0.02%)</title><rect x="99.1842%" y="357" width="0.0247%" height="15" fill="rgb(215,215,53)" fg:x="36111" fg:w="9"/><text x="99.4342%" y="367.50"></text></g><g><title>`0x7FF8717CBFF5 (4 samples, 0.01%)</title><rect x="99.2145%" y="357" width="0.0110%" height="15" fill="rgb(223,4,10)" fg:x="36122" fg:w="4"/><text x="99.4645%" y="367.50"></text></g><g><title>`0x7FF8717CC006 (6 samples, 0.02%)</title><rect x="99.2254%" y="357" width="0.0165%" height="15" fill="rgb(234,103,6)" fg:x="36126" fg:w="6"/><text x="99.4754%" y="367.50"></text></g><g><title>`0x7FF8717CC025 (10 samples, 0.03%)</title><rect x="99.2557%" y="357" width="0.0275%" height="15" fill="rgb(227,97,0)" fg:x="36137" fg:w="10"/><text x="99.5057%" y="367.50"></text></g><g><title>`0x7FF8717CC03B (5 samples, 0.01%)</title><rect x="99.2859%" y="357" width="0.0137%" height="15" fill="rgb(234,150,53)" fg:x="36148" fg:w="5"/><text x="99.5359%" y="367.50"></text></g><g><title>`0x7FF8717CC047 (13 samples, 0.04%)</title><rect x="99.2996%" y="357" width="0.0357%" height="15" fill="rgb(228,201,54)" fg:x="36153" fg:w="13"/><text x="99.5496%" y="367.50"></text></g><g><title>`0x7FF8717CC053 (10 samples, 0.03%)</title><rect x="99.3381%" y="357" width="0.0275%" height="15" fill="rgb(222,22,37)" fg:x="36167" fg:w="10"/><text x="99.5881%" y="367.50"></text></g><g><title>`0x7FF8717CC057 (41 samples, 0.11%)</title><rect x="99.3655%" y="357" width="0.1126%" height="15" fill="rgb(237,53,32)" fg:x="36177" fg:w="41"/><text x="99.6155%" y="367.50"></text></g><g><title>collision_test.exe`cosf (14 samples, 0.04%)</title><rect x="99.4781%" y="357" width="0.0385%" height="15" fill="rgb(233,25,53)" fg:x="36218" fg:w="14"/><text x="99.7281%" y="367.50"></text></g><g><title>collision_test.exe`_ZN64_$LT$glam..f32..mat3..Mat3$u20$as$u20$glam..euler..FromEuler$GT$17from_euler_angles17hfeb9a3cc779d12f0E (698 samples, 1.92%)</title><rect x="97.6351%" y="373" width="1.9172%" height="15" fill="rgb(210,40,34)" fg:x="35547" fg:w="698"/><text x="97.8851%" y="383.50">c..</text></g><g><title>collision_test.exe`sinf (13 samples, 0.04%)</title><rect x="99.5166%" y="357" width="0.0357%" height="15" fill="rgb(241,220,44)" fg:x="36232" fg:w="13"/><text x="99.7666%" y="367.50"></text></g><g><title>collision_test.exe`_ZN72_$LT$rand..rngs..thread..ThreadRng$u20$as$u20$core..default..Default$GT$7default17h6cd7251199e30b5cE (109 samples, 0.30%)</title><rect x="99.5523%" y="373" width="0.2994%" height="15" fill="rgb(235,28,35)" fg:x="36245" fg:w="109"/><text x="99.8023%" y="383.50"></text></g><g><title>`0x7FF8719687E2 (13 samples, 0.04%)</title><rect x="99.8627%" y="133" width="0.0357%" height="15" fill="rgb(210,56,17)" fg:x="36358" fg:w="13"/><text x="100.1127%" y="143.50"></text></g><g><title>`0x7FF8743FF8D4 (13 samples, 0.04%)</title><rect x="99.8627%" y="117" width="0.0357%" height="15" fill="rgb(224,130,29)" fg:x="36358" fg:w="13"/><text x="100.1127%" y="127.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::stdio::is_console (16 samples, 0.04%)</title><rect x="99.8572%" y="149" width="0.0439%" height="15" fill="rgb(235,212,8)" fg:x="36356" fg:w="16"/><text x="100.1072%" y="159.50"></text></g><g><title>`0x7FF87192F855 (5 samples, 0.01%)</title><rect x="99.9039%" y="133" width="0.0137%" height="15" fill="rgb(223,33,50)" fg:x="36373" fg:w="5"/><text x="100.1539%" y="143.50"></text></g><g><title>`0x7FF8743FF8D4 (5 samples, 0.01%)</title><rect x="99.9039%" y="117" width="0.0137%" height="15" fill="rgb(219,149,13)" fg:x="36373" fg:w="5"/><text x="100.1539%" y="127.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::stdio::is_utf8_console (7 samples, 0.02%)</title><rect x="99.9011%" y="149" width="0.0192%" height="15" fill="rgb(250,156,29)" fg:x="36372" fg:w="7"/><text x="100.1511%" y="159.50"></text></g><g><title>collision_test.exe`std::io::stdio::_print (29 samples, 0.08%)</title><rect x="99.8517%" y="373" width="0.0797%" height="15" fill="rgb(216,193,19)" fg:x="36354" fg:w="29"/><text x="100.1017%" y="383.50"></text></g><g><title>collision_test.exe`std::io::stdio::print_to (29 samples, 0.08%)</title><rect x="99.8517%" y="357" width="0.0797%" height="15" fill="rgb(216,135,14)" fg:x="36354" fg:w="29"/><text x="100.1017%" y="367.50"></text></g><g><title>collision_test.exe`std::io::stdio::impl$16::write_fmt (29 samples, 0.08%)</title><rect x="99.8517%" y="341" width="0.0797%" height="15" fill="rgb(241,47,5)" fg:x="36354" fg:w="29"/><text x="100.1017%" y="351.50"></text></g><g><title>collision_test.exe`std::io::Write::write_fmt (29 samples, 0.08%)</title><rect x="99.8517%" y="325" width="0.0797%" height="15" fill="rgb(233,42,35)" fg:x="36354" fg:w="29"/><text x="100.1017%" y="335.50"></text></g><g><title>collision_test.exe`core::fmt::write (29 samples, 0.08%)</title><rect x="99.8517%" y="309" width="0.0797%" height="15" fill="rgb(231,13,6)" fg:x="36354" fg:w="29"/><text x="100.1017%" y="319.50"></text></g><g><title>collision_test.exe`std::io::Write::write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (27 samples, 0.07%)</title><rect x="99.8572%" y="293" width="0.0742%" height="15" fill="rgb(207,181,40)" fg:x="36356" fg:w="27"/><text x="100.1072%" y="303.50"></text></g><g><title>collision_test.exe`std::io::stdio::impl$19::write_all (27 samples, 0.07%)</title><rect x="99.8572%" y="277" width="0.0742%" height="15" fill="rgb(254,173,49)" fg:x="36356" fg:w="27"/><text x="100.1072%" y="287.50"></text></g><g><title>collision_test.exe`std::sync::reentrant_lock::impl$11::deref (27 samples, 0.07%)</title><rect x="99.8572%" y="261" width="0.0742%" height="15" fill="rgb(221,1,38)" fg:x="36356" fg:w="27"/><text x="100.1072%" y="271.50"></text></g><g><title>collision_test.exe`std::io::buffered::linewritershim::impl$1::write_all (27 samples, 0.07%)</title><rect x="99.8572%" y="245" width="0.0742%" height="15" fill="rgb(206,124,46)" fg:x="36356" fg:w="27"/><text x="100.1072%" y="255.50"></text></g><g><title>collision_test.exe`core::result::impl$26::branch (27 samples, 0.07%)</title><rect x="99.8572%" y="229" width="0.0742%" height="15" fill="rgb(249,21,11)" fg:x="36356" fg:w="27"/><text x="100.1072%" y="239.50"></text></g><g><title>collision_test.exe`std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt; (27 samples, 0.07%)</title><rect x="99.8572%" y="213" width="0.0742%" height="15" fill="rgb(222,201,40)" fg:x="36356" fg:w="27"/><text x="100.1072%" y="223.50"></text></g><g><title>collision_test.exe`std::io::stdio::impl$1::write (27 samples, 0.07%)</title><rect x="99.8572%" y="197" width="0.0742%" height="15" fill="rgb(235,61,29)" fg:x="36356" fg:w="27"/><text x="100.1072%" y="207.50"></text></g><g><title>collision_test.exe`std::io::stdio::handle_ebadf (27 samples, 0.07%)</title><rect x="99.8572%" y="181" width="0.0742%" height="15" fill="rgb(219,207,3)" fg:x="36356" fg:w="27"/><text x="100.1072%" y="191.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::stdio::write (27 samples, 0.07%)</title><rect x="99.8572%" y="165" width="0.0742%" height="15" fill="rgb(222,56,46)" fg:x="36356" fg:w="27"/><text x="100.1072%" y="175.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::stdio::write_console_utf16 (4 samples, 0.01%)</title><rect x="99.9203%" y="149" width="0.0110%" height="15" fill="rgb(239,76,54)" fg:x="36379" fg:w="4"/><text x="100.1703%" y="159.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::stdio::write_valid_utf8_to_console (4 samples, 0.01%)</title><rect x="99.9203%" y="133" width="0.0110%" height="15" fill="rgb(231,124,27)" fg:x="36379" fg:w="4"/><text x="100.1703%" y="143.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::stdio::write_u16s (4 samples, 0.01%)</title><rect x="99.9203%" y="117" width="0.0110%" height="15" fill="rgb(249,195,6)" fg:x="36379" fg:w="4"/><text x="100.1703%" y="127.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::cvt (4 samples, 0.01%)</title><rect x="99.9203%" y="101" width="0.0110%" height="15" fill="rgb(237,174,47)" fg:x="36379" fg:w="4"/><text x="100.1703%" y="111.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::impl$3::is_zero (4 samples, 0.01%)</title><rect x="99.9203%" y="85" width="0.0110%" height="15" fill="rgb(206,201,31)" fg:x="36379" fg:w="4"/><text x="100.1703%" y="95.50"></text></g><g><title>`0x7FF87197534E (4 samples, 0.01%)</title><rect x="99.9203%" y="69" width="0.0110%" height="15" fill="rgb(231,57,52)" fg:x="36379" fg:w="4"/><text x="100.1703%" y="79.50"></text></g><g><title>`0x7FF87197548C (4 samples, 0.01%)</title><rect x="99.9203%" y="53" width="0.0110%" height="15" fill="rgb(248,177,22)" fg:x="36379" fg:w="4"/><text x="100.1703%" y="63.50"></text></g><g><title>`0x7FF8743FF8D4 (4 samples, 0.01%)</title><rect x="99.9203%" y="37" width="0.0110%" height="15" fill="rgb(215,211,37)" fg:x="36379" fg:w="4"/><text x="100.1703%" y="47.50"></text></g><g><title>`0x7FF87435BF6C (36,383 samples, 99.93%)</title><rect x="0.0027%" y="597" width="99.9313%" height="15" fill="rgb(241,128,51)" fg:x="1" fg:w="36383"/><text x="0.2527%" y="607.50">`0x7FF87435BF6C</text></g><g><title>`0x7FF872DDE8D7 (36,383 samples, 99.93%)</title><rect x="0.0027%" y="581" width="99.9313%" height="15" fill="rgb(227,165,31)" fg:x="1" fg:w="36383"/><text x="0.2527%" y="591.50">`0x7FF872DDE8D7</text></g><g><title>collision_test.exe`__scrt_common_main_seh() (36,377 samples, 99.91%)</title><rect x="0.0192%" y="565" width="99.9149%" height="15" fill="rgb(228,167,24)" fg:x="7" fg:w="36377"/><text x="0.2692%" y="575.50">collision_test.exe`__scrt_common_main_seh()</text></g><g><title>collision_test.exe`invoke_main() (36,369 samples, 99.89%)</title><rect x="0.0412%" y="549" width="99.8929%" height="15" fill="rgb(228,143,12)" fg:x="15" fg:w="36369"/><text x="0.2912%" y="559.50">collision_test.exe`invoke_main()</text></g><g><title>collision_test.exe`main (36,369 samples, 99.89%)</title><rect x="0.0412%" y="533" width="99.8929%" height="15" fill="rgb(249,149,8)" fg:x="15" fg:w="36369"/><text x="0.2912%" y="543.50">collision_test.exe`main</text></g><g><title>collision_test.exe`std::rt::lang_start_internal (36,369 samples, 99.89%)</title><rect x="0.0412%" y="517" width="99.8929%" height="15" fill="rgb(243,35,44)" fg:x="15" fg:w="36369"/><text x="0.2912%" y="527.50">collision_test.exe`std::rt::lang_start_internal</text></g><g><title>collision_test.exe`std::panic::catch_unwind (36,369 samples, 99.89%)</title><rect x="0.0412%" y="501" width="99.8929%" height="15" fill="rgb(246,89,9)" fg:x="15" fg:w="36369"/><text x="0.2912%" y="511.50">collision_test.exe`std::panic::catch_unwind</text></g><g><title>collision_test.exe`std::panicking::try (36,369 samples, 99.89%)</title><rect x="0.0412%" y="485" width="99.8929%" height="15" fill="rgb(233,213,13)" fg:x="15" fg:w="36369"/><text x="0.2912%" y="495.50">collision_test.exe`std::panicking::try</text></g><g><title>collision_test.exe`std::panicking::try::do_call (36,369 samples, 99.89%)</title><rect x="0.0412%" y="469" width="99.8929%" height="15" fill="rgb(233,141,41)" fg:x="15" fg:w="36369"/><text x="0.2912%" y="479.50">collision_test.exe`std::panicking::try::do_call</text></g><g><title>collision_test.exe`std::rt::lang_start_internal::closure$1 (36,369 samples, 99.89%)</title><rect x="0.0412%" y="453" width="99.8929%" height="15" fill="rgb(239,167,4)" fg:x="15" fg:w="36369"/><text x="0.2912%" y="463.50">collision_test.exe`std::rt::lang_start_internal::closure$1</text></g><g><title>collision_test.exe`std::panic::catch_unwind (36,369 samples, 99.89%)</title><rect x="0.0412%" y="437" width="99.8929%" height="15" fill="rgb(209,217,16)" fg:x="15" fg:w="36369"/><text x="0.2912%" y="447.50">collision_test.exe`std::panic::catch_unwind</text></g><g><title>collision_test.exe`_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h8fbba8ebca4fd595E.llvm.1695759254846458887 (36,369 samples, 99.89%)</title><rect x="0.0412%" y="421" width="99.8929%" height="15" fill="rgb(219,88,35)" fg:x="15" fg:w="36369"/><text x="0.2912%" y="431.50">collision_test.exe`_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h8fbba8ebca4fd595E.llvm.1695759254846458887</text></g><g><title>collision_test.exe`Unknown (36,369 samples, 99.89%)</title><rect x="0.0412%" y="405" width="99.8929%" height="15" fill="rgb(220,193,23)" fg:x="15" fg:w="36369"/><text x="0.2912%" y="415.50">collision_test.exe`Unknown</text></g><g><title>collision_test.exe`Unknown (36,369 samples, 99.89%)</title><rect x="0.0412%" y="389" width="99.8929%" height="15" fill="rgb(230,90,52)" fg:x="15" fg:w="36369"/><text x="0.2912%" y="399.50">collision_test.exe`Unknown</text></g><g><title>`0x7FF8719935FD (4 samples, 0.01%)</title><rect x="99.9615%" y="389" width="0.0110%" height="15" fill="rgb(252,106,19)" fg:x="36394" fg:w="4"/><text x="100.2115%" y="399.50"></text></g><g><title>`0x7FF874377390 (10 samples, 0.03%)</title><rect x="99.9506%" y="533" width="0.0275%" height="15" fill="rgb(206,74,20)" fg:x="36390" fg:w="10"/><text x="100.2006%" y="543.50"></text></g><g><title>`0x7FF87430A650 (10 samples, 0.03%)</title><rect x="99.9506%" y="517" width="0.0275%" height="15" fill="rgb(230,138,44)" fg:x="36390" fg:w="10"/><text x="100.2006%" y="527.50"></text></g><g><title>`0x7FF8742FED20 (10 samples, 0.03%)</title><rect x="99.9506%" y="501" width="0.0275%" height="15" fill="rgb(235,182,43)" fg:x="36390" fg:w="10"/><text x="100.2006%" y="511.50"></text></g><g><title>`0x7FF8742FF114 (6 samples, 0.02%)</title><rect x="99.9615%" y="485" width="0.0165%" height="15" fill="rgb(242,16,51)" fg:x="36394" fg:w="6"/><text x="100.2115%" y="495.50"></text></g><g><title>`0x7FF874361603 (6 samples, 0.02%)</title><rect x="99.9615%" y="469" width="0.0165%" height="15" fill="rgb(248,9,4)" fg:x="36394" fg:w="6"/><text x="100.2115%" y="479.50"></text></g><g><title>`0x7FF874361946 (6 samples, 0.02%)</title><rect x="99.9615%" y="453" width="0.0165%" height="15" fill="rgb(210,31,22)" fg:x="36394" fg:w="6"/><text x="100.2115%" y="463.50"></text></g><g><title>`0x7FF87436191A (6 samples, 0.02%)</title><rect x="99.9615%" y="437" width="0.0165%" height="15" fill="rgb(239,54,39)" fg:x="36394" fg:w="6"/><text x="100.2115%" y="447.50"></text></g><g><title>`0x7FF8742B142C (6 samples, 0.02%)</title><rect x="99.9615%" y="421" width="0.0165%" height="15" fill="rgb(230,99,41)" fg:x="36394" fg:w="6"/><text x="100.2115%" y="431.50"></text></g><g><title>`0x7FF8742B2080 (6 samples, 0.02%)</title><rect x="99.9615%" y="405" width="0.0165%" height="15" fill="rgb(253,106,12)" fg:x="36394" fg:w="6"/><text x="100.2115%" y="415.50"></text></g><g><title>`0x7FF874392CFD (12 samples, 0.03%)</title><rect x="99.9506%" y="549" width="0.0330%" height="15" fill="rgb(213,46,41)" fg:x="36390" fg:w="12"/><text x="100.2006%" y="559.50"></text></g><g><title>all (36,408 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(215,133,35)" fg:x="0" fg:w="36408"/><text x="0.2500%" y="623.50"></text></g><g><title>`0x7FF87439340E (24 samples, 0.07%)</title><rect x="99.9341%" y="597" width="0.0659%" height="15" fill="rgb(213,28,5)" fg:x="36384" fg:w="24"/><text x="100.1841%" y="607.50"></text></g><g><title>`0x7FF8743BEA23 (24 samples, 0.07%)</title><rect x="99.9341%" y="581" width="0.0659%" height="15" fill="rgb(215,77,49)" fg:x="36384" fg:w="24"/><text x="100.1841%" y="591.50"></text></g><g><title>`0x7FF8743910F8 (24 samples, 0.07%)</title><rect x="99.9341%" y="565" width="0.0659%" height="15" fill="rgb(248,100,22)" fg:x="36384" fg:w="24"/><text x="100.1841%" y="575.50"></text></g><g><title>`0x7FF874392F01 (4 samples, 0.01%)</title><rect x="99.9890%" y="549" width="0.0110%" height="15" fill="rgb(208,67,9)" fg:x="36404" fg:w="4"/><text x="100.2390%" y="559.50"></text></g><g><title>`0x7FF874361946 (4 samples, 0.01%)</title><rect x="99.9890%" y="533" width="0.0110%" height="15" fill="rgb(219,133,21)" fg:x="36404" fg:w="4"/><text x="100.2390%" y="543.50"></text></g></svg></svg>