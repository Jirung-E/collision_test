<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="36134"><g><title>`0x7FF8743061B1 (5 samples, 0.01%)</title><rect x="0.0028%" y="565" width="0.0138%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="5"/><text x="0.2528%" y="575.50"></text></g><g><title>`0x7FF874304757 (4 samples, 0.01%)</title><rect x="0.0055%" y="549" width="0.0111%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="4"/><text x="0.2555%" y="559.50"></text></g><g><title>`0x7FF8742FA2DA (4 samples, 0.01%)</title><rect x="0.0055%" y="533" width="0.0111%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="4"/><text x="0.2555%" y="543.50"></text></g><g><title>`0x7FF8742FF0A0 (6 samples, 0.02%)</title><rect x="0.0166%" y="437" width="0.0166%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="6"/><text x="0.2666%" y="447.50"></text></g><g><title>`0x7FF8742FA3B4 (6 samples, 0.02%)</title><rect x="0.0166%" y="421" width="0.0166%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="6"/><text x="0.2666%" y="431.50"></text></g><g><title>`0x7FF8742FA99D (5 samples, 0.01%)</title><rect x="0.0194%" y="405" width="0.0138%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="5"/><text x="0.2694%" y="415.50"></text></g><g><title>`0x7FF87173423B (7 samples, 0.02%)</title><rect x="0.0166%" y="517" width="0.0194%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="7"/><text x="0.2666%" y="527.50"></text></g><g><title>`0x7FF8717963F5 (7 samples, 0.02%)</title><rect x="0.0166%" y="501" width="0.0194%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="7"/><text x="0.2666%" y="511.50"></text></g><g><title>`0x7FF871882446 (7 samples, 0.02%)</title><rect x="0.0166%" y="485" width="0.0194%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="7"/><text x="0.2666%" y="495.50"></text></g><g><title>`0x7FF87430A650 (7 samples, 0.02%)</title><rect x="0.0166%" y="469" width="0.0194%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="7"/><text x="0.2666%" y="479.50"></text></g><g><title>`0x7FF8742FED20 (7 samples, 0.02%)</title><rect x="0.0166%" y="453" width="0.0194%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="7"/><text x="0.2666%" y="463.50"></text></g><g><title>`0x7FF8717C00F6 (8 samples, 0.02%)</title><rect x="0.0166%" y="549" width="0.0221%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="8"/><text x="0.2666%" y="559.50"></text></g><g><title>`0x7FF8717A55ED (8 samples, 0.02%)</title><rect x="0.0166%" y="533" width="0.0221%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="8"/><text x="0.2666%" y="543.50"></text></g><g><title>`0x7FF8742C6F81 (4 samples, 0.01%)</title><rect x="1.6577%" y="373" width="0.0111%" height="15" fill="rgb(206,188,39)" fg:x="599" fg:w="4"/><text x="1.9077%" y="383.50"></text></g><g><title>`0x7FF8742BFAFD (4 samples, 0.01%)</title><rect x="1.6577%" y="357" width="0.0111%" height="15" fill="rgb(217,207,13)" fg:x="599" fg:w="4"/><text x="1.9077%" y="367.50"></text></g><g><title>`0x7FF8742E813F (4 samples, 0.01%)</title><rect x="1.6577%" y="341" width="0.0111%" height="15" fill="rgb(231,73,38)" fg:x="599" fg:w="4"/><text x="1.9077%" y="351.50"></text></g><g><title>`0x7FF8743FFBB4 (4 samples, 0.01%)</title><rect x="1.6577%" y="325" width="0.0111%" height="15" fill="rgb(225,20,46)" fg:x="599" fg:w="4"/><text x="1.9077%" y="335.50"></text></g><g><title>collision_test.exe`Unknown (191 samples, 0.53%)</title><rect x="1.6688%" y="373" width="0.5286%" height="15" fill="rgb(210,31,41)" fg:x="603" fg:w="191"/><text x="1.9188%" y="383.50"></text></g><g><title>collision_test.exe`_ZN120_$LT$collision_test..bounds..VertexBox$u20$as$u20$core..convert..From$LT$$RF$collision_test..bounds..BoundingBox$GT$$GT$4from17hc24ee6019698f4d4E (1,824 samples, 5.05%)</title><rect x="2.2001%" y="373" width="5.0479%" height="15" fill="rgb(221,200,47)" fg:x="795" fg:w="1824"/><text x="2.4501%" y="383.50">collis..</text></g><g><title>collision_test.exe`_ZN4core5array5drain16drain_array_with17hb0570da4c3ecb5d4E (1,344 samples, 3.72%)</title><rect x="3.5285%" y="357" width="3.7195%" height="15" fill="rgb(226,26,5)" fg:x="1275" fg:w="1344"/><text x="3.7785%" y="367.50">coll..</text></g><g><title>`0x7FF8742BBFC4 (4 samples, 0.01%)</title><rect x="10.7018%" y="309" width="0.0111%" height="15" fill="rgb(249,33,26)" fg:x="3867" fg:w="4"/><text x="10.9518%" y="319.50"></text></g><g><title>collision_test.exe`_ZN14collision_test11convex_hull4Face3vec17hf9a1fbe7133b15b8E (10 samples, 0.03%)</title><rect x="10.6880%" y="341" width="0.0277%" height="15" fill="rgb(235,183,28)" fg:x="3862" fg:w="10"/><text x="10.9380%" y="351.50"></text></g><g><title>`0x7FF8742BBE86 (7 samples, 0.02%)</title><rect x="10.6963%" y="325" width="0.0194%" height="15" fill="rgb(221,5,38)" fg:x="3865" fg:w="7"/><text x="10.9463%" y="335.50"></text></g><g><title>collision_test.exe`_ZN14collision_test11convex_hull7Simplex34get_nearest_if_not_contains_origin17hae94df8794c8ad06E (21 samples, 0.06%)</title><rect x="10.6603%" y="357" width="0.0581%" height="15" fill="rgb(247,18,42)" fg:x="3852" fg:w="21"/><text x="10.9103%" y="367.50"></text></g><g><title>collision_test.exe`_ZN90_$LT$collision_test..sphere..Sphere$u20$as$u20$collision_test..convex_hull..ConvexHull$GT$18get_furthest_point17h0b9e7d4500431f24E (243 samples, 0.67%)</title><rect x="10.7184%" y="357" width="0.6725%" height="15" fill="rgb(241,131,45)" fg:x="3873" fg:w="243"/><text x="10.9684%" y="367.50"></text></g><g><title>collision_test.exe`_ZN14collision_test11convex_hull10ConvexHull3gjk17h5d3879a84f33d1bbE (8,649 samples, 23.94%)</title><rect x="7.2480%" y="373" width="23.9359%" height="15" fill="rgb(249,31,29)" fg:x="2619" fg:w="8649"/><text x="7.4980%" y="383.50">collision_test.exe`_ZN14collision_test..</text></g><g><title>collision_test.exe`_ZN95_$LT$collision_test..bounds..BoundingBox$u20$as$u20$collision_test..convex_hull..ConvexHull$GT$18get_furthest_point17h881f12efe8758988E (7,152 samples, 19.79%)</title><rect x="11.3909%" y="357" width="19.7930%" height="15" fill="rgb(225,111,53)" fg:x="4116" fg:w="7152"/><text x="11.6409%" y="367.50">collision_test.exe`_ZN95_$LT$co..</text></g><g><title>collision_test.exe`_ZN4core5array5drain16drain_array_with17hb0570da4c3ecb5d4E (3,036 samples, 8.40%)</title><rect x="22.7819%" y="341" width="8.4021%" height="15" fill="rgb(238,160,17)" fg:x="8232" fg:w="3036"/><text x="23.0319%" y="351.50">collision_te..</text></g><g><title>`0x7FF8742BBE86 (9 samples, 0.02%)</title><rect x="37.0344%" y="325" width="0.0249%" height="15" fill="rgb(214,148,48)" fg:x="13382" fg:w="9"/><text x="37.2844%" y="335.50"></text></g><g><title>`0x7FF8742BBFC4 (8 samples, 0.02%)</title><rect x="37.0371%" y="309" width="0.0221%" height="15" fill="rgb(232,36,49)" fg:x="13383" fg:w="8"/><text x="37.2871%" y="319.50"></text></g><g><title>collision_test.exe`_ZN14collision_test11convex_hull4Face3vec17hf9a1fbe7133b15b8E (23 samples, 0.06%)</title><rect x="37.0067%" y="341" width="0.0637%" height="15" fill="rgb(209,103,24)" fg:x="13372" fg:w="23"/><text x="37.2567%" y="351.50"></text></g><g><title>collision_test.exe`std::sys::alloc::windows::process_heap_alloc (4 samples, 0.01%)</title><rect x="37.0593%" y="325" width="0.0111%" height="15" fill="rgb(229,88,8)" fg:x="13391" fg:w="4"/><text x="37.3093%" y="335.50"></text></g><g><title>collision_test.exe`_ZN14collision_test11convex_hull7Simplex34get_nearest_if_not_contains_origin17hae94df8794c8ad06E (35 samples, 0.10%)</title><rect x="36.9763%" y="357" width="0.0969%" height="15" fill="rgb(213,181,19)" fg:x="13361" fg:w="35"/><text x="37.2263%" y="367.50"></text></g><g><title>collision_test.exe`_ZN93_$LT$collision_test..bounds..VertexBox$u20$as$u20$collision_test..convex_hull..ConvexHull$GT$18get_furthest_point17h3018c41f00405be2E (5,714 samples, 15.81%)</title><rect x="37.0731%" y="357" width="15.8134%" height="15" fill="rgb(254,191,54)" fg:x="13396" fg:w="5714"/><text x="37.3231%" y="367.50">collision_test.exe`_ZN93..</text></g><g><title>collision_test.exe`_ZN14collision_test11convex_hull10ConvexHull3gjk17h69a14ce9413db30bE (15,952 samples, 44.15%)</title><rect x="31.1839%" y="373" width="44.1468%" height="15" fill="rgb(241,83,37)" fg:x="11268" fg:w="15952"/><text x="31.4339%" y="383.50">collision_test.exe`_ZN14collision_test11convex_hull10ConvexHull3gjk17h69..</text></g><g><title>collision_test.exe`_ZN95_$LT$collision_test..bounds..BoundingBox$u20$as$u20$collision_test..convex_hull..ConvexHull$GT$18get_furthest_point17h881f12efe8758988E (8,110 samples, 22.44%)</title><rect x="52.8865%" y="357" width="22.4442%" height="15" fill="rgb(233,36,39)" fg:x="19110" fg:w="8110"/><text x="53.1365%" y="367.50">collision_test.exe`_ZN95_$LT$collisi..</text></g><g><title>collision_test.exe`_ZN4core5array5drain16drain_array_with17hb0570da4c3ecb5d4E (2,863 samples, 7.92%)</title><rect x="67.4074%" y="341" width="7.9233%" height="15" fill="rgb(226,3,54)" fg:x="24357" fg:w="2863"/><text x="67.6574%" y="351.50">collision_t..</text></g><g><title>collision_test.exe`_ZN14collision_test48_$LT$impl$u20$collision_test..sphere..Sphere$GT$27check_boundingbox_collision17h09408dff45dcb628E (10 samples, 0.03%)</title><rect x="75.3307%" y="373" width="0.0277%" height="15" fill="rgb(245,192,40)" fg:x="27220" fg:w="10"/><text x="75.5807%" y="383.50"></text></g><g><title>collision_test.exe`_ZN14collision_test53_$LT$impl$u20$collision_test..bounds..BoundingBox$GT$22check_sphere_collision17h6e011dea1adf0133E (639 samples, 1.77%)</title><rect x="75.3584%" y="373" width="1.7684%" height="15" fill="rgb(238,167,29)" fg:x="27230" fg:w="639"/><text x="75.6084%" y="383.50"></text></g><g><title>collision_test.exe`_ZN14collision_test6bounds11BoundingBox11new_rotated17hac1c9edeacf73f7cE (17 samples, 0.05%)</title><rect x="77.1268%" y="373" width="0.0470%" height="15" fill="rgb(232,182,51)" fg:x="27869" fg:w="17"/><text x="77.3768%" y="383.50"></text></g><g><title>collision_test.exe`Unknown (2,238 samples, 6.19%)</title><rect x="82.1083%" y="357" width="6.1936%" height="15" fill="rgb(231,60,39)" fg:x="29669" fg:w="2238"/><text x="82.3583%" y="367.50">collisio..</text></g><g><title>collision_test.exe`_ZN14collision_test6bounds11BoundingBox13obb_collision17h09a3795e8e427bf0E (6,827 samples, 18.89%)</title><rect x="77.1739%" y="373" width="18.8936%" height="15" fill="rgb(208,69,12)" fg:x="27886" fg:w="6827"/><text x="77.4239%" y="383.50">collision_test.exe`_ZN14collis..</text></g><g><title>collision_test.exe`_ZN4core5array5drain16drain_array_with17hb0570da4c3ecb5d4E (2,806 samples, 7.77%)</title><rect x="88.3019%" y="357" width="7.7655%" height="15" fill="rgb(235,93,37)" fg:x="31907" fg:w="2806"/><text x="88.5519%" y="367.50">collision_t..</text></g><g><title>collision_test.exe`_ZN14collision_test6bounds11BoundingBox14aabb_collision17hadbbe3bdbbaf94a2E (255 samples, 0.71%)</title><rect x="96.0674%" y="373" width="0.7057%" height="15" fill="rgb(213,116,39)" fg:x="34713" fg:w="255"/><text x="96.3174%" y="383.50"></text></g><g><title>collision_test.exe`_ZN14collision_test6bounds11BoundingBox3new17h862a3b5df40ac2f1E (43 samples, 0.12%)</title><rect x="96.7731%" y="373" width="0.1190%" height="15" fill="rgb(222,207,29)" fg:x="34968" fg:w="43"/><text x="97.0231%" y="383.50"></text></g><g><title>`0x7FF874405113 (151 samples, 0.42%)</title><rect x="96.9115%" y="293" width="0.4179%" height="15" fill="rgb(206,96,30)" fg:x="35018" fg:w="151"/><text x="97.1615%" y="303.50"></text></g><g><title>`0x7FF874405117 (87 samples, 0.24%)</title><rect x="97.3294%" y="293" width="0.2408%" height="15" fill="rgb(218,138,4)" fg:x="35169" fg:w="87"/><text x="97.5794%" y="303.50"></text></g><g><title>`0x7FF874405120 (10 samples, 0.03%)</title><rect x="97.5729%" y="293" width="0.0277%" height="15" fill="rgb(250,191,14)" fg:x="35257" fg:w="10"/><text x="97.8229%" y="303.50"></text></g><g><title>`0x7FF8742CAB69 (259 samples, 0.72%)</title><rect x="96.9060%" y="309" width="0.7168%" height="15" fill="rgb(239,60,40)" fg:x="35016" fg:w="259"/><text x="97.1560%" y="319.50"></text></g><g><title>collision_test.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17ha260551dfb9699c2E (276 samples, 0.76%)</title><rect x="96.8977%" y="373" width="0.7638%" height="15" fill="rgb(206,27,48)" fg:x="35013" fg:w="276"/><text x="97.1477%" y="383.50"></text></g><g><title>collision_test.exe`Unknown (276 samples, 0.76%)</title><rect x="96.8977%" y="357" width="0.7638%" height="15" fill="rgb(225,35,8)" fg:x="35013" fg:w="276"/><text x="97.1477%" y="367.50"></text></g><g><title>`0x7FF8742C9A86 (275 samples, 0.76%)</title><rect x="96.9004%" y="341" width="0.7611%" height="15" fill="rgb(250,213,24)" fg:x="35014" fg:w="275"/><text x="97.1504%" y="351.50"></text></g><g><title>`0x7FF8742C9BC5 (275 samples, 0.76%)</title><rect x="96.9004%" y="325" width="0.7611%" height="15" fill="rgb(247,123,22)" fg:x="35014" fg:w="275"/><text x="97.1504%" y="335.50"></text></g><g><title>`0x7FF8742CAB7C (14 samples, 0.04%)</title><rect x="97.6227%" y="309" width="0.0387%" height="15" fill="rgb(231,138,38)" fg:x="35275" fg:w="14"/><text x="97.8727%" y="319.50"></text></g><g><title>`0x7FF8742C6F81 (14 samples, 0.04%)</title><rect x="97.6227%" y="293" width="0.0387%" height="15" fill="rgb(231,145,46)" fg:x="35275" fg:w="14"/><text x="97.8727%" y="303.50"></text></g><g><title>`0x7FF8742BFAFD (13 samples, 0.04%)</title><rect x="97.6255%" y="277" width="0.0360%" height="15" fill="rgb(251,118,11)" fg:x="35276" fg:w="13"/><text x="97.8755%" y="287.50"></text></g><g><title>`0x7FF8742E813F (13 samples, 0.04%)</title><rect x="97.6255%" y="261" width="0.0360%" height="15" fill="rgb(217,147,25)" fg:x="35276" fg:w="13"/><text x="97.8755%" y="271.50"></text></g><g><title>`0x7FF8743FFBB4 (13 samples, 0.04%)</title><rect x="97.6255%" y="245" width="0.0360%" height="15" fill="rgb(247,81,37)" fg:x="35276" fg:w="13"/><text x="97.8755%" y="255.50"></text></g><g><title>`0x7FF8717C7939 (17 samples, 0.05%)</title><rect x="98.1347%" y="357" width="0.0470%" height="15" fill="rgb(209,12,38)" fg:x="35460" fg:w="17"/><text x="98.3847%" y="367.50"></text></g><g><title>`0x7FF8717C79B8 (4 samples, 0.01%)</title><rect x="98.1984%" y="357" width="0.0111%" height="15" fill="rgb(227,1,9)" fg:x="35483" fg:w="4"/><text x="98.4484%" y="367.50"></text></g><g><title>`0x7FF8717C79DF (6 samples, 0.02%)</title><rect x="98.2094%" y="357" width="0.0166%" height="15" fill="rgb(248,47,43)" fg:x="35487" fg:w="6"/><text x="98.4594%" y="367.50"></text></g><g><title>`0x7FF8717C7A0C (11 samples, 0.03%)</title><rect x="98.2343%" y="357" width="0.0304%" height="15" fill="rgb(221,10,30)" fg:x="35496" fg:w="11"/><text x="98.4843%" y="367.50"></text></g><g><title>`0x7FF8717C7A3B (12 samples, 0.03%)</title><rect x="98.2786%" y="357" width="0.0332%" height="15" fill="rgb(210,229,1)" fg:x="35512" fg:w="12"/><text x="98.5286%" y="367.50"></text></g><g><title>`0x7FF8717C7A3F (4 samples, 0.01%)</title><rect x="98.3118%" y="357" width="0.0111%" height="15" fill="rgb(222,148,37)" fg:x="35524" fg:w="4"/><text x="98.5618%" y="367.50"></text></g><g><title>`0x7FF8717C7A4C (14 samples, 0.04%)</title><rect x="98.3229%" y="357" width="0.0387%" height="15" fill="rgb(234,67,33)" fg:x="35528" fg:w="14"/><text x="98.5729%" y="367.50"></text></g><g><title>`0x7FF8717C7A58 (13 samples, 0.04%)</title><rect x="98.3617%" y="357" width="0.0360%" height="15" fill="rgb(247,98,35)" fg:x="35542" fg:w="13"/><text x="98.6117%" y="367.50"></text></g><g><title>`0x7FF8717C7A5C (4 samples, 0.01%)</title><rect x="98.3976%" y="357" width="0.0111%" height="15" fill="rgb(247,138,52)" fg:x="35555" fg:w="4"/><text x="98.6476%" y="367.50"></text></g><g><title>`0x7FF8717C7A60 (16 samples, 0.04%)</title><rect x="98.4087%" y="357" width="0.0443%" height="15" fill="rgb(213,79,30)" fg:x="35559" fg:w="16"/><text x="98.6587%" y="367.50"></text></g><g><title>`0x7FF8717C7AB1 (8 samples, 0.02%)</title><rect x="98.4641%" y="357" width="0.0221%" height="15" fill="rgb(246,177,23)" fg:x="35579" fg:w="8"/><text x="98.7141%" y="367.50"></text></g><g><title>`0x7FF8717C7ABA (18 samples, 0.05%)</title><rect x="98.4862%" y="357" width="0.0498%" height="15" fill="rgb(230,62,27)" fg:x="35587" fg:w="18"/><text x="98.7362%" y="367.50"></text></g><g><title>`0x7FF8717C7AC3 (4 samples, 0.01%)</title><rect x="98.5360%" y="357" width="0.0111%" height="15" fill="rgb(216,154,8)" fg:x="35605" fg:w="4"/><text x="98.7860%" y="367.50"></text></g><g><title>`0x7FF8717C7ACC (12 samples, 0.03%)</title><rect x="98.5471%" y="357" width="0.0332%" height="15" fill="rgb(244,35,45)" fg:x="35609" fg:w="12"/><text x="98.7971%" y="367.50"></text></g><g><title>`0x7FF8717C7AD8 (5 samples, 0.01%)</title><rect x="98.5831%" y="357" width="0.0138%" height="15" fill="rgb(251,115,12)" fg:x="35622" fg:w="5"/><text x="98.8331%" y="367.50"></text></g><g><title>`0x7FF8717C7ADC (4 samples, 0.01%)</title><rect x="98.5969%" y="357" width="0.0111%" height="15" fill="rgb(240,54,50)" fg:x="35627" fg:w="4"/><text x="98.8469%" y="367.50"></text></g><g><title>`0x7FF8717C7AE4 (7 samples, 0.02%)</title><rect x="98.6080%" y="357" width="0.0194%" height="15" fill="rgb(233,84,52)" fg:x="35631" fg:w="7"/><text x="98.8580%" y="367.50"></text></g><g><title>`0x7FF8717C7AE8 (12 samples, 0.03%)</title><rect x="98.6273%" y="357" width="0.0332%" height="15" fill="rgb(207,117,47)" fg:x="35638" fg:w="12"/><text x="98.8773%" y="367.50"></text></g><g><title>`0x7FF8717C7B0B (17 samples, 0.05%)</title><rect x="98.6688%" y="357" width="0.0470%" height="15" fill="rgb(249,43,39)" fg:x="35653" fg:w="17"/><text x="98.9188%" y="367.50"></text></g><g><title>`0x7FF8717C7B18 (13 samples, 0.04%)</title><rect x="98.7159%" y="357" width="0.0360%" height="15" fill="rgb(209,38,44)" fg:x="35670" fg:w="13"/><text x="98.9659%" y="367.50"></text></g><g><title>`0x7FF8717C7B28 (6 samples, 0.02%)</title><rect x="98.7546%" y="357" width="0.0166%" height="15" fill="rgb(236,212,23)" fg:x="35684" fg:w="6"/><text x="99.0046%" y="367.50"></text></g><g><title>`0x7FF8717C7B2C (23 samples, 0.06%)</title><rect x="98.7712%" y="357" width="0.0637%" height="15" fill="rgb(242,79,21)" fg:x="35690" fg:w="23"/><text x="99.0212%" y="367.50"></text></g><g><title>`0x7FF8717C7B30 (33 samples, 0.09%)</title><rect x="98.8349%" y="357" width="0.0913%" height="15" fill="rgb(211,96,35)" fg:x="35713" fg:w="33"/><text x="99.0849%" y="367.50"></text></g><g><title>`0x7FF8717CBD30 (11 samples, 0.03%)</title><rect x="98.9262%" y="357" width="0.0304%" height="15" fill="rgb(253,215,40)" fg:x="35746" fg:w="11"/><text x="99.1762%" y="367.50"></text></g><g><title>`0x7FF8717CBDE0 (8 samples, 0.02%)</title><rect x="98.9760%" y="357" width="0.0221%" height="15" fill="rgb(211,81,21)" fg:x="35764" fg:w="8"/><text x="99.2260%" y="367.50"></text></g><g><title>`0x7FF8717CBE0B (14 samples, 0.04%)</title><rect x="99.0009%" y="357" width="0.0387%" height="15" fill="rgb(208,190,38)" fg:x="35773" fg:w="14"/><text x="99.2509%" y="367.50"></text></g><g><title>`0x7FF8717CBE24 (7 samples, 0.02%)</title><rect x="99.0480%" y="357" width="0.0194%" height="15" fill="rgb(235,213,38)" fg:x="35790" fg:w="7"/><text x="99.2980%" y="367.50"></text></g><g><title>`0x7FF8717CBE28 (4 samples, 0.01%)</title><rect x="99.0674%" y="357" width="0.0111%" height="15" fill="rgb(237,122,38)" fg:x="35797" fg:w="4"/><text x="99.3174%" y="367.50"></text></g><g><title>`0x7FF8717CBE2C (8 samples, 0.02%)</title><rect x="99.0784%" y="357" width="0.0221%" height="15" fill="rgb(244,218,35)" fg:x="35801" fg:w="8"/><text x="99.3284%" y="367.50"></text></g><g><title>`0x7FF8717CBF95 (9 samples, 0.02%)</title><rect x="99.1006%" y="357" width="0.0249%" height="15" fill="rgb(240,68,47)" fg:x="35809" fg:w="9"/><text x="99.3506%" y="367.50"></text></g><g><title>`0x7FF8717CBFB9 (8 samples, 0.02%)</title><rect x="99.1282%" y="357" width="0.0221%" height="15" fill="rgb(210,16,53)" fg:x="35819" fg:w="8"/><text x="99.3782%" y="367.50"></text></g><g><title>`0x7FF8717CBFC2 (4 samples, 0.01%)</title><rect x="99.1504%" y="357" width="0.0111%" height="15" fill="rgb(235,124,12)" fg:x="35827" fg:w="4"/><text x="99.4004%" y="367.50"></text></g><g><title>`0x7FF8717CBFCB (10 samples, 0.03%)</title><rect x="99.1615%" y="357" width="0.0277%" height="15" fill="rgb(224,169,11)" fg:x="35831" fg:w="10"/><text x="99.4115%" y="367.50"></text></g><g><title>`0x7FF8717CBFD4 (13 samples, 0.04%)</title><rect x="99.1891%" y="357" width="0.0360%" height="15" fill="rgb(250,166,2)" fg:x="35841" fg:w="13"/><text x="99.4391%" y="367.50"></text></g><g><title>`0x7FF8717CC006 (6 samples, 0.02%)</title><rect x="99.2362%" y="357" width="0.0166%" height="15" fill="rgb(242,216,29)" fg:x="35858" fg:w="6"/><text x="99.4862%" y="367.50"></text></g><g><title>`0x7FF8717CC025 (12 samples, 0.03%)</title><rect x="99.2694%" y="357" width="0.0332%" height="15" fill="rgb(230,116,27)" fg:x="35870" fg:w="12"/><text x="99.5194%" y="367.50"></text></g><g><title>`0x7FF8717CC03B (4 samples, 0.01%)</title><rect x="99.3026%" y="357" width="0.0111%" height="15" fill="rgb(228,99,48)" fg:x="35882" fg:w="4"/><text x="99.5526%" y="367.50"></text></g><g><title>`0x7FF8717CC047 (12 samples, 0.03%)</title><rect x="99.3137%" y="357" width="0.0332%" height="15" fill="rgb(253,11,6)" fg:x="35886" fg:w="12"/><text x="99.5637%" y="367.50"></text></g><g><title>`0x7FF8717CC053 (14 samples, 0.04%)</title><rect x="99.3496%" y="357" width="0.0387%" height="15" fill="rgb(247,143,39)" fg:x="35899" fg:w="14"/><text x="99.5996%" y="367.50"></text></g><g><title>`0x7FF8717CC057 (32 samples, 0.09%)</title><rect x="99.3884%" y="357" width="0.0886%" height="15" fill="rgb(236,97,10)" fg:x="35913" fg:w="32"/><text x="99.6384%" y="367.50"></text></g><g><title>collision_test.exe`cosf (16 samples, 0.04%)</title><rect x="99.4769%" y="357" width="0.0443%" height="15" fill="rgb(233,208,19)" fg:x="35945" fg:w="16"/><text x="99.7269%" y="367.50"></text></g><g><title>collision_test.exe`_ZN64_$LT$glam..f32..mat3..Mat3$u20$as$u20$glam..euler..FromEuler$GT$17from_euler_angles17hfeb9a3cc779d12f0E (690 samples, 1.91%)</title><rect x="97.6615%" y="373" width="1.9096%" height="15" fill="rgb(216,164,2)" fg:x="35289" fg:w="690"/><text x="97.9115%" y="383.50">c..</text></g><g><title>collision_test.exe`sinf (18 samples, 0.05%)</title><rect x="99.5212%" y="357" width="0.0498%" height="15" fill="rgb(220,129,5)" fg:x="35961" fg:w="18"/><text x="99.7712%" y="367.50"></text></g><g><title>collision_test.exe`_ZN72_$LT$rand..rngs..thread..ThreadRng$u20$as$u20$core..default..Default$GT$7default17h6cd7251199e30b5cE (114 samples, 0.32%)</title><rect x="99.5710%" y="373" width="0.3155%" height="15" fill="rgb(242,17,10)" fg:x="35979" fg:w="114"/><text x="99.8210%" y="383.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::stdio::is_console (8 samples, 0.02%)</title><rect x="99.8921%" y="149" width="0.0221%" height="15" fill="rgb(242,107,0)" fg:x="36095" fg:w="8"/><text x="100.1421%" y="159.50"></text></g><g><title>`0x7FF8719687E2 (7 samples, 0.02%)</title><rect x="99.8948%" y="133" width="0.0194%" height="15" fill="rgb(251,28,31)" fg:x="36096" fg:w="7"/><text x="100.1448%" y="143.50"></text></g><g><title>`0x7FF8743FF8D4 (6 samples, 0.02%)</title><rect x="99.8976%" y="117" width="0.0166%" height="15" fill="rgb(233,223,10)" fg:x="36097" fg:w="6"/><text x="100.1476%" y="127.50"></text></g><g><title>collision_test.exe`core::result::impl$26::branch (18 samples, 0.05%)</title><rect x="99.8893%" y="229" width="0.0498%" height="15" fill="rgb(215,21,27)" fg:x="36094" fg:w="18"/><text x="100.1393%" y="239.50"></text></g><g><title>collision_test.exe`std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt; (18 samples, 0.05%)</title><rect x="99.8893%" y="213" width="0.0498%" height="15" fill="rgb(232,23,21)" fg:x="36094" fg:w="18"/><text x="100.1393%" y="223.50"></text></g><g><title>collision_test.exe`std::io::stdio::impl$1::write (18 samples, 0.05%)</title><rect x="99.8893%" y="197" width="0.0498%" height="15" fill="rgb(244,5,23)" fg:x="36094" fg:w="18"/><text x="100.1393%" y="207.50"></text></g><g><title>collision_test.exe`std::io::stdio::handle_ebadf (18 samples, 0.05%)</title><rect x="99.8893%" y="181" width="0.0498%" height="15" fill="rgb(226,81,46)" fg:x="36094" fg:w="18"/><text x="100.1393%" y="191.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::stdio::write (18 samples, 0.05%)</title><rect x="99.8893%" y="165" width="0.0498%" height="15" fill="rgb(247,70,30)" fg:x="36094" fg:w="18"/><text x="100.1393%" y="175.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::stdio::write_console_utf16 (7 samples, 0.02%)</title><rect x="99.9197%" y="149" width="0.0194%" height="15" fill="rgb(212,68,19)" fg:x="36105" fg:w="7"/><text x="100.1697%" y="159.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::stdio::write_valid_utf8_to_console (7 samples, 0.02%)</title><rect x="99.9197%" y="133" width="0.0194%" height="15" fill="rgb(240,187,13)" fg:x="36105" fg:w="7"/><text x="100.1697%" y="143.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::stdio::write_u16s (7 samples, 0.02%)</title><rect x="99.9197%" y="117" width="0.0194%" height="15" fill="rgb(223,113,26)" fg:x="36105" fg:w="7"/><text x="100.1697%" y="127.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::cvt (7 samples, 0.02%)</title><rect x="99.9197%" y="101" width="0.0194%" height="15" fill="rgb(206,192,2)" fg:x="36105" fg:w="7"/><text x="100.1697%" y="111.50"></text></g><g><title>collision_test.exe`std::sys::pal::windows::impl$3::is_zero (7 samples, 0.02%)</title><rect x="99.9197%" y="85" width="0.0194%" height="15" fill="rgb(241,108,4)" fg:x="36105" fg:w="7"/><text x="100.1697%" y="95.50"></text></g><g><title>`0x7FF87197534E (7 samples, 0.02%)</title><rect x="99.9197%" y="69" width="0.0194%" height="15" fill="rgb(247,173,49)" fg:x="36105" fg:w="7"/><text x="100.1697%" y="79.50"></text></g><g><title>`0x7FF87197548C (7 samples, 0.02%)</title><rect x="99.9197%" y="53" width="0.0194%" height="15" fill="rgb(224,114,35)" fg:x="36105" fg:w="7"/><text x="100.1697%" y="63.50"></text></g><g><title>`0x7FF8743FF8D4 (7 samples, 0.02%)</title><rect x="99.9197%" y="37" width="0.0194%" height="15" fill="rgb(245,159,27)" fg:x="36105" fg:w="7"/><text x="100.1697%" y="47.50"></text></g><g><title>`0x7FF87435BF6C (36,112 samples, 99.94%)</title><rect x="0.0028%" y="597" width="99.9391%" height="15" fill="rgb(245,172,44)" fg:x="1" fg:w="36112"/><text x="0.2528%" y="607.50">`0x7FF87435BF6C</text></g><g><title>`0x7FF872DDE8D7 (36,112 samples, 99.94%)</title><rect x="0.0028%" y="581" width="99.9391%" height="15" fill="rgb(236,23,11)" fg:x="1" fg:w="36112"/><text x="0.2528%" y="591.50">`0x7FF872DDE8D7</text></g><g><title>collision_test.exe`__scrt_common_main_seh() (36,107 samples, 99.93%)</title><rect x="0.0166%" y="565" width="99.9253%" height="15" fill="rgb(205,117,38)" fg:x="6" fg:w="36107"/><text x="0.2666%" y="575.50">collision_test.exe`__scrt_common_main_seh()</text></g><g><title>collision_test.exe`invoke_main() (36,099 samples, 99.90%)</title><rect x="0.0387%" y="549" width="99.9031%" height="15" fill="rgb(237,72,25)" fg:x="14" fg:w="36099"/><text x="0.2887%" y="559.50">collision_test.exe`invoke_main()</text></g><g><title>collision_test.exe`main (36,099 samples, 99.90%)</title><rect x="0.0387%" y="533" width="99.9031%" height="15" fill="rgb(244,70,9)" fg:x="14" fg:w="36099"/><text x="0.2887%" y="543.50">collision_test.exe`main</text></g><g><title>collision_test.exe`std::rt::lang_start_internal (36,099 samples, 99.90%)</title><rect x="0.0387%" y="517" width="99.9031%" height="15" fill="rgb(217,125,39)" fg:x="14" fg:w="36099"/><text x="0.2887%" y="527.50">collision_test.exe`std::rt::lang_start_internal</text></g><g><title>collision_test.exe`std::panic::catch_unwind (36,099 samples, 99.90%)</title><rect x="0.0387%" y="501" width="99.9031%" height="15" fill="rgb(235,36,10)" fg:x="14" fg:w="36099"/><text x="0.2887%" y="511.50">collision_test.exe`std::panic::catch_unwind</text></g><g><title>collision_test.exe`std::panicking::try (36,099 samples, 99.90%)</title><rect x="0.0387%" y="485" width="99.9031%" height="15" fill="rgb(251,123,47)" fg:x="14" fg:w="36099"/><text x="0.2887%" y="495.50">collision_test.exe`std::panicking::try</text></g><g><title>collision_test.exe`std::panicking::try::do_call (36,099 samples, 99.90%)</title><rect x="0.0387%" y="469" width="99.9031%" height="15" fill="rgb(221,13,13)" fg:x="14" fg:w="36099"/><text x="0.2887%" y="479.50">collision_test.exe`std::panicking::try::do_call</text></g><g><title>collision_test.exe`std::rt::lang_start_internal::closure$1 (36,099 samples, 99.90%)</title><rect x="0.0387%" y="453" width="99.9031%" height="15" fill="rgb(238,131,9)" fg:x="14" fg:w="36099"/><text x="0.2887%" y="463.50">collision_test.exe`std::rt::lang_start_internal::closure$1</text></g><g><title>collision_test.exe`std::panic::catch_unwind (36,099 samples, 99.90%)</title><rect x="0.0387%" y="437" width="99.9031%" height="15" fill="rgb(211,50,8)" fg:x="14" fg:w="36099"/><text x="0.2887%" y="447.50">collision_test.exe`std::panic::catch_unwind</text></g><g><title>collision_test.exe`_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h8fbba8ebca4fd595E.llvm.17221116569601344052 (36,099 samples, 99.90%)</title><rect x="0.0387%" y="421" width="99.9031%" height="15" fill="rgb(245,182,24)" fg:x="14" fg:w="36099"/><text x="0.2887%" y="431.50">collision_test.exe`_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h8fbba8ebca4fd595E.llvm.17221116569601344052</text></g><g><title>collision_test.exe`Unknown (36,099 samples, 99.90%)</title><rect x="0.0387%" y="405" width="99.9031%" height="15" fill="rgb(242,14,37)" fg:x="14" fg:w="36099"/><text x="0.2887%" y="415.50">collision_test.exe`Unknown</text></g><g><title>collision_test.exe`Unknown (36,099 samples, 99.90%)</title><rect x="0.0387%" y="389" width="99.9031%" height="15" fill="rgb(246,228,12)" fg:x="14" fg:w="36099"/><text x="0.2887%" y="399.50">collision_test.exe`Unknown</text></g><g><title>collision_test.exe`std::io::stdio::_print (20 samples, 0.06%)</title><rect x="99.8865%" y="373" width="0.0553%" height="15" fill="rgb(213,55,15)" fg:x="36093" fg:w="20"/><text x="100.1365%" y="383.50"></text></g><g><title>collision_test.exe`std::io::stdio::print_to (20 samples, 0.06%)</title><rect x="99.8865%" y="357" width="0.0553%" height="15" fill="rgb(209,9,3)" fg:x="36093" fg:w="20"/><text x="100.1365%" y="367.50"></text></g><g><title>collision_test.exe`std::io::stdio::impl$16::write_fmt (20 samples, 0.06%)</title><rect x="99.8865%" y="341" width="0.0553%" height="15" fill="rgb(230,59,30)" fg:x="36093" fg:w="20"/><text x="100.1365%" y="351.50"></text></g><g><title>collision_test.exe`std::io::Write::write_fmt (20 samples, 0.06%)</title><rect x="99.8865%" y="325" width="0.0553%" height="15" fill="rgb(209,121,21)" fg:x="36093" fg:w="20"/><text x="100.1365%" y="335.50"></text></g><g><title>collision_test.exe`core::fmt::write (20 samples, 0.06%)</title><rect x="99.8865%" y="309" width="0.0553%" height="15" fill="rgb(220,109,13)" fg:x="36093" fg:w="20"/><text x="100.1365%" y="319.50"></text></g><g><title>collision_test.exe`std::io::Write::write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (20 samples, 0.06%)</title><rect x="99.8865%" y="293" width="0.0553%" height="15" fill="rgb(232,18,1)" fg:x="36093" fg:w="20"/><text x="100.1365%" y="303.50"></text></g><g><title>collision_test.exe`std::io::stdio::impl$19::write_all (19 samples, 0.05%)</title><rect x="99.8893%" y="277" width="0.0526%" height="15" fill="rgb(215,41,42)" fg:x="36094" fg:w="19"/><text x="100.1393%" y="287.50"></text></g><g><title>collision_test.exe`std::sync::reentrant_lock::impl$11::deref (19 samples, 0.05%)</title><rect x="99.8893%" y="261" width="0.0526%" height="15" fill="rgb(224,123,36)" fg:x="36094" fg:w="19"/><text x="100.1393%" y="271.50"></text></g><g><title>collision_test.exe`std::io::buffered::linewritershim::impl$1::write_all (19 samples, 0.05%)</title><rect x="99.8893%" y="245" width="0.0526%" height="15" fill="rgb(240,125,3)" fg:x="36094" fg:w="19"/><text x="100.1393%" y="255.50"></text></g><g><title>`0x7FF8742FF082 (4 samples, 0.01%)</title><rect x="99.9585%" y="485" width="0.0111%" height="15" fill="rgb(205,98,50)" fg:x="36119" fg:w="4"/><text x="100.2085%" y="495.50"></text></g><g><title>`0x7FF8742BB0E7 (4 samples, 0.01%)</title><rect x="99.9585%" y="469" width="0.0111%" height="15" fill="rgb(205,185,37)" fg:x="36119" fg:w="4"/><text x="100.2085%" y="479.50"></text></g><g><title>`0x7FF8742FCE01 (4 samples, 0.01%)</title><rect x="99.9585%" y="453" width="0.0111%" height="15" fill="rgb(238,207,15)" fg:x="36119" fg:w="4"/><text x="100.2085%" y="463.50"></text></g><g><title>`0x7FF874377390 (7 samples, 0.02%)</title><rect x="99.9585%" y="533" width="0.0194%" height="15" fill="rgb(213,199,42)" fg:x="36119" fg:w="7"/><text x="100.2085%" y="543.50"></text></g><g><title>`0x7FF87430A650 (7 samples, 0.02%)</title><rect x="99.9585%" y="517" width="0.0194%" height="15" fill="rgb(235,201,11)" fg:x="36119" fg:w="7"/><text x="100.2085%" y="527.50"></text></g><g><title>`0x7FF8742FED20 (7 samples, 0.02%)</title><rect x="99.9585%" y="501" width="0.0194%" height="15" fill="rgb(207,46,11)" fg:x="36119" fg:w="7"/><text x="100.2085%" y="511.50"></text></g><g><title>`0x7FF874392CFD (9 samples, 0.02%)</title><rect x="99.9585%" y="549" width="0.0249%" height="15" fill="rgb(241,35,35)" fg:x="36119" fg:w="9"/><text x="100.2085%" y="559.50"></text></g><g><title>all (36,134 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="36134"/><text x="0.2500%" y="623.50"></text></g><g><title>`0x7FF87439340E (21 samples, 0.06%)</title><rect x="99.9419%" y="597" width="0.0581%" height="15" fill="rgb(247,202,23)" fg:x="36113" fg:w="21"/><text x="100.1919%" y="607.50"></text></g><g><title>`0x7FF8743BEA23 (21 samples, 0.06%)</title><rect x="99.9419%" y="581" width="0.0581%" height="15" fill="rgb(219,102,11)" fg:x="36113" fg:w="21"/><text x="100.1919%" y="591.50"></text></g><g><title>`0x7FF8743910F8 (21 samples, 0.06%)</title><rect x="99.9419%" y="565" width="0.0581%" height="15" fill="rgb(243,110,44)" fg:x="36113" fg:w="21"/><text x="100.1919%" y="575.50"></text></g></svg></svg>